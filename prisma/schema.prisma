// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output        = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id           String  @id @default(uuid())
  name         String
  externalUrls Json?
  description  String?

  novels Novel[]
  user   User?
}

model Novel {
  id              String           @id @default(uuid())
  title           String
  authorId        String
  author          Author           @relation(fields: [authorId], references: [id])
  externalUrls    Json?
  downloadUrls    Json?
  description     String?
  snippet         String?
  thumbnailUrl    String?
  bannerUrl       String?
  galleryItems    GalleryItem[]
  tags            String[]
  downloads       Int              @default(0)
  favorites       Int              @default(0)
  views           Int              @default(0)
  comments        Comment[]
  ratings         UserRating[]
  collectionItems CollectionItem[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt

  @@index([authorId])
}

model Comment {
  id      String @id @default(uuid())
  novel   Novel  @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  text    String

  parentId String?
  parent   Comment?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentToReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([novelId])
  @@index([userId])
  @@index([parentId])
}

model UserRating {
  id              String  @id @default(uuid())
  novel           Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId         String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  value           Int
  plot            Int     @default(0)
  characters      Int     @default(0)
  backgroundsUi   Int     @default(0)
  characterArt    Int     @default(0)
  music           Int     @default(0)
  soundEffects    Int     @default(0)
  emotionalImpact Int     @default(0)
  reason          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([novelId, userId])
  @@index([novelId])
  @@index([userId])
}

model GalleryItem {
  id        String   @id @default(uuid())
  novelId   String
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  footer    String?
  imageUrl  String
  createdAt DateTime @default(now())

  @@unique([novelId, imageUrl])
  @@index([novelId])
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique
  email     String    @unique
  username  String    @unique
  roles     String[]  @default(["user"])
  avatarUrl String?
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  comments            Comment[]
  ratings             UserRating[]
  author              Author?            @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId            String?            @unique
  collections         Collection[]
  followedCollections CollectionFollow[]

  @@index([clerkId])
  @@index([email])
  @@index([username])
}

// AuthorManager table removed (managers feature deferred)

model Collection {
  id          String             @id @default(uuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  isPublic    Boolean            @default(false)
  items       CollectionItem[]
  followers   CollectionFollow[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model CollectionItem {
  id           String     @id @default(uuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  novelId      String
  novel        Novel      @relation(fields: [novelId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([collectionId, novelId])
  @@index([novelId])
}

model CollectionFollow {
  id           String     @id @default(uuid())
  collectionId String
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([collectionId, userId])
  @@index([userId])
}
