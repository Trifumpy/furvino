openapi: 3.0.0
info:
  title: Disk API
  description: |
    The RESTful API for the webinterface and apps to connect and interact with users and files on the disk.

    ### Disclaimer

    We provide the APIs as-is. That means we donâ€™t provide warranties of any kind, either express or implied.
    You can use this API but it may change at any point in time without advance notice.

    ### Headers

    **Note on header names**: Throughout this API specification headers are considered case-insensitive as
    [RFC2616](https://www.ietf.org/rfc/rfc2616.txt) dictates.
    This means that header name casing may not  be exactly as you will find them documented.
    This is due to Go's header set code which normalizes them so only the first letter and each letter after a dash (-)
    is capitalized. For instance the `X-Pre2FAToken` will actually be sent as `X-Pre2fatoken`. For improved readability
    we have documented the former however.

    ### Rate limits

    First of all, the rate limits are meant as a measure of keeping the service available to everyone, so any disk deemed
    to be using too much resources and having negative effects on other disks can be limited further than the limits stated here
    without prior notice.

    #### Request rate limit
    In general there is a limit on the amount of requests done to a disk. This covers all http and sftp requests.
    This limit is around `12` requests per second, but short request bursts exceeding this limit are allowed, if not sustained.
    If too many requests are send for a disk, the API will return status code `429 Too Many Requests`.

    #### Action based slots
    In addition to basic request rate limits, there are action specific slots limiting for instance the amount of
    concurrent downloads and uploads. These are also set on a disk level and can vary a bit based on the size of the disk.
    If the amount of slots is exhausted, the request will be put in waiting until a slot has freed up. Some actions, such as
    WebSockets will return status code `429 Too Many Requests` if no slots are free and will not be put into waiting.

    We will list the minimum slot amounts here:
      - Downloading (including previews): 10
      - Uploading: 10
      - Downloading from a share: 10
      - Uploading to a share: 5
      - Moving files/directories: 5
      - Copying files/directories: 4
      - Creating directories: 8
      - Using websockets: 15
      - Listing file/directories: 15
      - Generic API requests: 15
      - SFTP connections: 15

  version: 2.2.0
  x-logo:
    url: "https://filehosting-client.transip.nl/build/img/stack-transip.svg"
    backgroundColor: "#FFFFFF"
    altText: "STACK"

tags:
- name: basic
  description: API for version and status
- name: authentication
  description: API for authentication and tokens
- name: authtoken
  description: API for listing and updating auth tokens.
- name: token-request
  description: API for requesting a new token
- name: disk
  description: API for disk related info
- name: user
  description: API for user related actions (admin only for all but list users API and get user API)
- name: me
  description: API for updating your own user settings
- name: node
  description: API for node related actions
- name: upload
  description: API for the uploading of files
- name: download
  description: API for the downloading of files
- name: share
  description: API actions for shares
- name: tag
  description: API actions for tags
- name: trash
  description: API actions for trash
- name: event
  description: API for listing disk or node events.
- name: internal-share
  description: API for actions on internal shares.
- name: public-share
  description: >-
    API for public shares. These do not use the regular authentication, but
    instead rely on a shareToken, with optional password.
- name: misc
  description: Various helper APIs such as QR code image generation.

paths:
  /status:
    get:
      summary: API status
      operationId: status
      tags:
      - basic
      description: Returns OK if the API is available
      responses:
        '200':
          description: Returns an OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /version:
    get:
      summary: API version info
      operationId: version
      tags:
      - basic
      description: Returns version information.
      responses:
        '200':
          description: Returns version information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version'
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /authenticate:
    post:
      summary: User login
      description: >-
        Authenticates a user for the disk and returns a session or pre 2fa
        session token.
      operationId: authenticate
      tags:
      - authentication
      parameters:
      - in: header
        name: X-SetCookie
        description: |
          Set to `true` to let the server return a `SetCookie` header for the newly created token.
          Does not do anything when 2FA is enabled and another login step is required.
        schema:
          type: boolean
      responses:
        '200':
          description: Returned if the user was successfully authenticated.
          headers:
            X-CSRF-Token:
              description: >-
                The CSRF token associated with the session. Required for session
                requests which use a cookie instead of a header.
              schema:
                type: string
            X-2FA-Required:
              description: >-
                True when a 2 factor authentication challenge is required to
                complete the authentication.
              schema:
                type: boolean
            X-2FA-Verify-URL:
              description: >-
                Only returned if 2FA is enabled for this user. The url to complete the login process
                by verification of a 2FA challenge (/api/v2/authenticate/verify).
              example: /api/v2/authenticate/verify
              schema:
                type: string
            X-Pre2FAToken:
              description: >-
                The token used to complete the 2 factor authentication
                challenge. Only set if X-2FA-Required is True.
              schema:
                type: string
            X-SessionToken:
              description: >-
                The token used to authenticate for the rest of the API. Only set
                if X-2FA-Required is False.
              schema:
                type: string
            X-TokenID:
              description: >-
                The database identifier for the created session token. Use it to
                delete the token with the DELETE request.
              schema:
                type: integer
                format: int64
            Set-Cookie:
              schema:
                type: string
              description: An updated session cookie with name `SessionToken`. Only set when the `X-SetCookie` header was set _and_ 2FA is off.
        '400':
          description: Returned if a parameter was invalid.
        '401':
          description: Returned if the login was unsuccessful.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Too many auth tokens exist for this disk, try removing some.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication'
        description: User credentials and optional session duration in seconds.
        required: true
  /authenticate/verify:
    post:
      summary: Verify 2FA challenge
      description: >-
        Verifies a Two Factor Authentication challenge and issues a session token.
        A pre 2FA token from /authenticate is required for this step.
      operationId: verify2FA
      tags:
      - authentication
      security:
      - pre2FAToken: []
      parameters:
      - in: header
        name: X-2FA-TOTP-Value
        required: true
        description: |
          The Time-based One-time Password algorithm value generated from the 2FA shared secret.
          See:
            - https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm
            - https://tools.ietf.org/html/rfc6238
          Can also be a 2FA backup token. If valid & accepted, the given backup token will be deleted.
        schema:
          type: string
      - in: header
        name: X-SetCookie
        description: Set to `true` to let the server return a `SetCookie` header for the newly created token.
        schema:
          type: boolean
      responses:
        '200':
          description: Returned if the 2FA challenge was successfully verified and a session token was created.
          headers:
            X-CSRF-Token:
              description: >-
                The CSRF token associated with the session. Required for session
                requests which use a cookie instead of a header.
              schema:
                type: string
            X-SessionToken:
              description: >-
                The session token used to authenticate for the rest of the API.
              schema:
                type: string
            X-TokenID:
              description: >-
                The database identifier for the created session token. Use it to
                delete the token with the DELETE request.
              schema:
                type: integer
                format: int64
            Set-Cookie:
              schema:
                type: string
              description: An updated session cookie with name `SessionToken`. Only set when the `X-SetCookie` header was set.
        '400':
          description: Returned if the TOTP value was not given.
        '401':
          description: Returned if the 2FA challenge value was invalid or if the user was not authenticated.
        '412':
          description: Returned if 2FA is disabled for this user.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Too many auth tokens exist for this disk, try removing some.
  /authenticate/sudo:
    post:
      summary: Re-login for Sudo token
      description: >-
        Authenticates a user again to retrieve a Sudo token used for token and
        user management.
      operationId: sudoAuth
      tags:
      - authentication
      security:
      - sessionToken: []
      - sessionCookie: []
      responses:
        '200':
          description: Returned if the user was successfully authenticated.
          headers:
            X-SudoToken:
              description: The sudo token to use for restricted Sudo actions.
              schema:
                type: string
            X-TokenID:
              description: >-
                The database identifier for the created sudo token. Use it to
                delete the token with the DELETE request.
              schema:
                type: integer
                format: int64
        '400':
          description: Returned if a parameter was invalid.
        '401':
          description: Returned if the login was unsuccessful.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Too many auth tokens exist for this disk, try removing some.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sudoAuth'
        description: User password and optional session duration in seconds.
        required: true
  /authenticate/csrf-token:
    get:
      summary: Get CSRF token
      description: >-
        Retrieves the session tokens CSRF token for cookie based actions and to allow specifying App Tokens in the URL via GET parameters.
        The retrieved CSRF tokens have a maximum validity of 8 hours. After 8 hours they must be renewed.
      operationId: getCsrfToken
      tags:
      - authentication
      security:
      - sessionToken: []
      - appToken: []
      - sessionCookie: []
      responses:
        '200':
          description: Returned if the request was successful.
          headers:
            X-CSRF-Token:
              description: >-
                The CSRF token associated with the session. Required for session
                requests which use a cookie instead of a header.
              schema:
                type: string
            X-TokenID:
              description: >-
                The database identifier for the session token. Use it to delete
                the token with the DELETE request.
              schema:
                type: integer
                format: int64
        '401':
          description: Returned when the request is not properly authenticated
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /authenticate/set-cookie:
    post:
      summary: Set session cookie
      description: Sets an updated session cookie (`SessionToken`)
      operationId: setSessionCookie
      tags:
        - authentication
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      responses:
        '200':
          description: Returned if the request was successful.
          headers:
            Set-Cookie:
              schema:
                type: string
              description: An updated session cookie with name `SessionToken`.
        '401':
          description: Returned when the request is not properly authenticated.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /authenticate/tokens:
    get:
      summary: List auth tokens
      description: Lists the session and other tokens currently issued and valid.
      operationId: listTokens
      tags:
      - authtoken
      security:
      - sessionToken: []
      - sessionCookie: []
      parameters:
      - in: query
        name: limit
        description: Maximum number of records to return
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
      - in: query
        name: offset
        description: The offset at which to start for pagination
        schema:
          type: integer
      - in: query
        name: types
        description: >-
          Optional field to filter tokens by type.
          Specifying multiple types is allowed by separating the types with a comma ( , ).
        schema:
          type: string
          enum:
          - Session
          - Sudo
          - App
          - WebDAV
          - SFTP
      - in: query
        name: orderBy
        description: >-
          Field to sort the token results by. Default order is by expiration date ASC.
        schema:
          type: string
          enum:
          - default
          - label
          - expiresAt
          - createdAt
      - in: query
        name: reverse
        description: >-
          Whether to reverse the order by (aka ASC/DESC)
        schema:
          type: boolean
      responses:
        '200':
          description: Returned if the request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authTokenList'
        '400':
          description: Returned when one of the parameters is invalid.
        '401':
          description: Returned when the request is not properly authenticated.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    post:
      summary: Create new specialized token
      description: >-
        Creates a specialized token to authenticate without a session token.
        Needs a descriptive label for the new token. Only accepts a session
        token for  creating an App token.
      operationId: createToken
      tags:
      - authtoken
      security:
      - sessionToken: []
      - sessionCookie: []
      - sudoToken: []
      responses:
        '201':
          description: Returned when the device token was created successfully.
          headers:
            X-AppToken:
              description: >-
                The app token that has been created. Only set if the type to be
                created was an App token.
              schema:
                type: string
            X-WebDAVToken:
              description: >-
                The WebDAV token that has been created. Only set if the type to
                be created was a WebDAV token.
              schema:
                type: string
            X-SFTPToken:
              description: >-
                The SFTP token that has been created. Only set if the type to be
                created was a SFTP token.
              schema:
                type: string
            X-TokenID:
              description: >-
                The database identifier for the created token. Use it to delete
                the token with the DELETE request.
              schema:
                type: integer
                format: int64
        '400':
          description: Returned if a parameter was invalid.
        '401':
          description: Returned if the user is not logged in or an invalid token is used.
        '403':
          description: >-
            Returned if you are attempting to create a non device token with a
            session token.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Too many auth tokens exist for this disk, try removing some.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createToken'
        description: The new token options.
        required: true

  '/authenticate/tokens/{tokenID}':
    put:
      summary: Update existing token
      description: >-
        Update one or multiple fields of an existing token. You need to supply
        the token ID and the token fields to be updated.
      operationId: updateToken
      tags:
        - authtoken
      security:
        - sudoToken: []
      parameters:
        - in: path
          name: tokenID
          description: >-
            The token ID to update.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returned when the device token was updated successfully.
          headers:
            X-TokenID:
              description: >-
                The database identifier for the updated token.
              schema:
                type: integer
                format: int64
        '400':
          description: Returned if a parameter was invalid.
        '401':
          description: Returned if the user is not logged in or an invalid token is used.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateToken'
        description: The token to be updated
        required: true
    delete:
      summary: Delete auth token
      operationId: deleteToken
      tags:
      - authtoken
      security:
      - sessionToken: []
      - appToken: []
      - sudoToken: []
      parameters:
      - in: path
        name: tokenID
        description: >-
          The token ID to delete. An integer with the actual token ID is
          preferred here, but an actual Token is also accepted for backwards
          compatibility reasons.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: Returned if the token was successfully deleted.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if a token is used to destroy another token besides itself
            and not using a Sudo token.
        '404':
          description: Returned if the token was not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /authenticate/token-request:
    post:
      summary: Token request create
      operationId: tokenRequestCreate
      tags:
      - token-request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tokenRequest'
        description: The token request options. Optional.
      responses:
        '204':
          description: Returned if the request was successfully created.
          headers:
            X-RequestToken:
              description: The token used for identifying a token request. Specify it for the PUT and DELETE requests.
              schema:
                type: string
        '412':
          description: Returned if there are too many open token requests open for this disk already.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    get:
      summary: Token request status
      description: Retrieve the status of the token request and whether it exists at all.
      operationId: tokenRequestStatus
      tags:
      - token-request
      parameters:
      - in: header
        name: X-RequestToken
        required: true
        description: The request token that was given out by the create request.
        schema:
          type: string
      - in: query
        name: extraData
        description: Whether to return the extraData in the body of the request.
        schema:
          type: boolean
      responses:
        '200':
          description: Returned if the token request is verified and `extraData` is returned in the body. A token may be retrieved with DELETE.
        '204':
          description: Returned if the token request is verified and the `extraData` flag was not set. A token may be retrieved with DELETE.
        '401':
          description: Returned if a verify login request is still required.
        '404':
          description: Returned if the token request was not found.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Token request verify
      description: Verifies the user with username and password to verify the app token request.
      operationId: tokenRequestVerify
      tags:
      - token-request
      parameters:
      - in: header
        name: X-RequestToken
        required: true
        description: The request token that was given out by the create request.
        schema:
          type: string
      responses:
        '204':
          description: Returned if the user was successfully authenticated. Depending on the users 2FA status token may now be retrieved with DELETE.
          headers:
            X-2FA-Required:
              description: True when a 2 factor authentication challenge is required to complete the authentication.
              schema:
                type: boolean
        '401':
          description: Returned if the login was unsuccessful.
        '404':
          description: Returned if the token request was not found.
        '409':
          description: Returned if the token request is already verified.
          headers:
            X-2FA-Required:
              description: True when a 2 factor authentication challenge is required to complete the authentication.
              schema:
                type: boolean
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: s_jansen
                password:
                  type: string
                  example: SecritPassw0rd
        description: Username and password.
        required: true
    patch:
      summary: Token request verify (step 2)
      description: Verifies the user with a 2FA token to verify the app token request.
      operationId: tokenRequestVerify2FA
      tags:
      - token-request
      parameters:
      - in: header
        name: X-RequestToken
        required: true
        description: The request token that was given out by the create request.
        schema:
          type: string
      - in: header
        name: X-2FA-TOTP-Value
        required: true
        description: |
          The Time-based One-time Password algorithm value generated from the 2FA shared secret.
          See:
            - https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm
            - https://tools.ietf.org/html/rfc6238
        schema:
          type: string
      responses:
        '204':
          description: Returned if the user was successfully authenticated. A token may now be retrieved with DELETE.
        '401':
          description: Returned if the login was unsuccessful.
        '404':
          description: Returned if the token request was not found.
        '409':
          description: Returned if the token request is already verified.
        '412':
          description: Returned if the step 1 of the verification is not yet completed.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    delete:
      summary: Token request finish
      operationId: tokenRequestFinish
      description: If the user has been logged in and verified previously with PUT, the app token will be created and returned. Otherwise, a 401 is returned.
      tags:
      - token-request
      parameters:
      - in: header
        name: X-RequestToken
        required: true
        description: The request token that was given out by the create request.
        schema:
          type: string
      responses:
        '201':
          description: Returned when the token was created successfully.
          headers:
            X-Username:
              description: The username for the created token.
              schema:
                type: string
            X-AppToken:
              description: >-
                The app token that has been created. Only set if the type to be
                created was an App token.
              schema:
                type: string
            X-WebDAVToken:
              description: >-
                The WebDAV token that has been created. Only set if the type to
                be created was a WebDAV token.
              schema:
                type: string
            X-SFTPToken:
              description: >-
                The SFTP token that has been created. Only set if the type to be
                created was a SFTP token.
              schema:
                type: string
            X-TokenID:
              description: >-
                The database identifier for the created token. Use it to delete
                the token with the DELETE request.
              schema:
                type: integer
                format: int64
        '400':
          description: Returned if a parameter was invalid.
        '401':
          description: Returned if the user has not verified its login data yet.
        '404':
          description: Returned if the token request was not found.
        '429':
          description: Returned if there are too many login attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Too many auth tokens exist for this disk, try removing some.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createToken'
        description: The new token options.
        required: true

  /disk-info:
    get:
      summary: Disk statistics
      operationId: getDiskInfo
      tags:
      - disk
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Returns some usage and size statistics for the complete disk.
      responses:
        '200':
          description: Returns statistics for the complete disk.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDiskInfo'
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /disk/customizations/{name}':
    get:
      summary: Get a customization file
      operationId: getCustomization
      tags:
        - disk
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
        - appToken: [ ]
        - teamBlueJWT: [ ]
      description: Retrieve a customization file
      parameters:
        - in: path
          name: name
          description: The name of the customization file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the file contents of the customization
          content:
            text/plain:
              schema:
                type: string
                example: pingpong
            text/jpeg:
              schema:
                type: string
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not the disks' main user.
        '404':
          description: Returned if the customization was not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Set or update a customization file
      operationId: setCustomization
      tags:
        - disk
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
        - appToken: [ ]
        - teamBlueJWT: [ ]
      description: Set or update a new customization file. The maximum file size of customizations is 64 KiB.
      parameters:
        - in: path
          name: name
          description: The name of the customization file
          required: true
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: pongping
          text/jpeg:
            schema:
              type: string
      responses:
        '201':
          description: >-
            Returned if the customization was not set before and the creation was
            successful.
        '204':
          description: >-
            Returned if the customization was set before and the update was
            successful.
        '400':
          description: Returned if the customization name was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not the disks' main user.
        '413':
          description: Returned if the customization payload was too big (max 256 KiB).
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage to save the file.
    delete:
      summary: Delete customization file
      operationId: deleteCustomization
      tags:
        - disk
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
        - appToken: [ ]
        - teamBlueJWT: [ ]
      description: Delete a customization file
      parameters:
        - in: path
          name: name
          description: The name of the customization file
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned if the customization no longer exists.
        '400':
          description: Returned if the customization name was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not the disks' main user.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /disk-events/auth-token:
    get:
      summary: List auth token disk events
      operationId: listAuthTokenEvents
      tags:
        - event
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      description: Filter and list auth token disk events.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: userId
          description: The user to fetch events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventType
          description: The specific event type to retrieve.
          schema:
            type: string
            enum:
              - create
              - prune
              - delete
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAuthTokenEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not allowed to view disk events.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /disk-events/share:
    get:
      summary: List share disk events
      operationId: listShareEvents
      tags:
        - event
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      description: Filter and list share disk events.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: userId
          description: The user to fetch events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: shareNodeId
          description: The node id shared to fetch events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventType
          description: The specific event type to retrieve.
          schema:
            type: string
            enum:
              - create
              - update
              - delete
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listShareEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not allowed to view disk events.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /disk-events/user:
    get:
      summary: List user disk events
      operationId: listUserEvents
      tags:
        - event
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      description: Filter and list user disk events.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: userId
          description: The user to fetch events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventType
          description: The specific event type to retrieve.
          schema:
            type: string
            enum:
              - create
              - update
              - delete
              - updatePassword
              - enable2FA
              - disable2FA
              - backupCodeUsed
              - resetBackupCodes
              - reset2FASecret
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUserEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not allowed to view disk events.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /me:
    get:
      summary: Get own information
      operationId: getSelf
      tags:
      - me
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Returns the user information for the logged in user.
      responses:
        '200':
          description: Returns basic profile information on the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserMe'
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Update own information
      operationId: updateSelf
      tags:
      - me
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Updates the information of the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSelf'
      responses:
        '204':
          description: Returned if the user update was successful.
          headers:
            Location:
              description: The url to GET the user.
              schema:
                type: string
            X-Username:
              description: The username of the user.
              schema:
                type: string
        '400':
          description: Returned if the preference name was invalid.
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /me/password:
    put:
      summary: Change own password
      operationId: changePassword
      tags:
      - me
      - authentication
      security:
      - sudoToken: []
      description: Updates the password of the logged in user. Required Sudo.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePassword'
      responses:
        '204':
          description: Returned if the user password change was successful.
        '400':
          description: Returned if the password was invalid (too short for instance).
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/me/preferences/{name}':
    get:
      summary: Get user preference
      operationId: getPreference
      tags:
      - me
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Get a user preference value for a preference name.
      parameters:
      - in: path
        name: name
        description: The name of the preference
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returns the value of the preference in plaintext
          content:
            text/plain:
              schema:
                type: string
                example: pingpong
        '401':
          description: Returned if the user is not logged in.
        '404':
          description: Returned if the preference was not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Set user preference
      operationId: setPreference
      tags:
      - me
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: >-
        Set a user preference value for a preference name (max 1 KiB). Value should
        be inside the request body.
      parameters:
      - in: path
        name: name
        description: The name of the preference
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: pongping
      responses:
        '201':
          description: >-
            Returned if the preference was not set before and the creation was
            successful.
        '204':
          description: >-
            Returned if the preference was set before and the update was
            successful.
        '400':
          description: Returned if the preference name was invalid.
        '401':
          description: Returned if the user is not logged in.
        '413':
          description: Returned if the preference payload was too big (max 1 KiB).
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    delete:
      summary: Delete user preference
      operationId: deletePreference
      tags:
      - me
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Delete a user preference with given name.
      parameters:
      - in: path
        name: name
        description: The name of the preference
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the preference no longer exists.
        '400':
          description: Returned if the preference name was invalid.
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /me/2fa:
    post:
      summary: Enable 2FA (New secret)
      description: >-
        Step 1 for enabling Two Factor Authentication for the current user.
        Sets a new two factor shared secret on the user and returns it.
        To complete enabling 2FA the implementer must visit PUT `/me/2fa`
        with a successful 2FA challenge response.
        2FA needs to be currently off. Requires Sudo.
      operationId: set2FASecret
      tags:
      - me
      - authentication
      security:
      - sudoToken: []
      responses:
        '200':
          description: Returned if a new secret for 2FA was set and returned.
          headers:
            X-2FA-Secret:
              description: >-
                The 2FA shared secret used to verify 2FA challenges from now on when
                the users attempts to login. Needs to be fed to a challenge app on
                the users device.
              example: 84ngfdhb3e3YD834sdher9
              schema:
                type: string
            X-2FA-Authenticator-URI:
              description: |
                The authenticator URI that should be fed to the users authenticator app via a QR code.
                This QRcode can be generated by the `/misc/qrcode` endpoint.
                See: https://github.com/google/google-authenticator/wiki/Conflicting-Accounts
              example: otpauth://totp/STACK:username@stackname.stackstorage.com?secret=84ngfdhb3e3YD834sdher9&issuer=STACK
              schema:
                type: string
        '401':
          description: Returned if the user is not logged in.
        '412':
          description: Returned if 2FA is already enabled for this user.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Enable 2FA (Verify secret)
      description: >-
        Step 2 for enabling Two Factor Authentication for the current user.
        Verifies the shared secret challenge response given by the user,
        enabling 2FA if successful. Returns the new 2FA backup codes for the user.
        Requires Sudo.
      operationId: enable2FA
      tags:
      - me
      - authentication
      security:
      - sudoToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generate2FABackupCodes'
      parameters:
      - in: header
        name: X-2FA-TOTP-Value
        required: true
        description: |
          The Time-based One-time Password algorithm value generated from the 2FA shared secret.
          See:
            - https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm
            - https://tools.ietf.org/html/rfc6238
        schema:
          type: string
      responses:
        '200':
          description: Returned if 2FA was enabled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/2FABackupCodes'
        '400':
          description: Returned if the TOTP value was not given.
        '401':
          description: Returned if the 2FA challenge value was invalid or if the user was not authenticated.
        '412':
          description: Returned if 2FA is already enabled or no shared secret was set yet by POST /me/2fa.
        '429':
          description: Returned if there are too many authentication attempts for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    delete:
      summary: Disable 2FA
      description: >-
        Disables Two Factor Authentication for the current user. Requires Sudo.
      operationId: disable2FA
      tags:
      - me
      - authentication
      security:
      - sudoToken: []
      responses:
        '204':
          description: Returned if 2FA was disabled successfully.
        '401':
          description: Returned if the user is not logged in.
        '412':
          description: Returned if 2FA is already disabled.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /me/2fa/backupcodes:
    put:
      summary: Generate 2FA backup codes
      description: >-
        Generates new 2FA backup codes, invalidating any remaining old ones. Requires Sudo.
      operationId: generate2FABackupCodes
      tags:
      - me
      - authentication
      security:
      - sudoToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generate2FABackupCodes'
      responses:
        '201':
          description: Returned if the new backup codes were created and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/2FABackupCodes'
        '401':
          description: Returned if the user is not logged in.
        '412':
          description: Returned if 2FA is disabled.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /me/events/auth-token:
    get:
      summary: List my auth token disk events
      operationId: listMyAuthTokenEvents
      tags:
        - event
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      description: Filter and list my auth token disk events.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventType
          description: The specific event type to retrieve.
          schema:
            type: string
            enum:
              - create
              - prune
              - delete
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAuthTokenEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /me/events/share:
    get:
      summary: List my share disk events
      operationId: listMyShareEvents
      tags:
        - event
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      description: Filter and list my share disk events.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: shareNodeId
          description: The node id shared to fetch events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventType
          description: The specific event type to retrieve.
          schema:
            type: string
            enum:
              - create
              - update
              - delete
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listShareEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /me/events/user:
    get:
      summary: List my disk events
      operationId: listMyUserEvents
      tags:
        - event
      security:
        - sessionToken: [ ]
        - sessionCookie: [ ]
      description: Filter and list user disk events.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventType
          description: The specific event type to retrieve.
          schema:
            type: string
            enum:
              - create
              - update
              - delete
              - updatePassword
              - enable2FA
              - disable2FA
              - backupCodeUsed
              - resetBackupCodes
              - reset2FASecret
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUserEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not allowed to view disk events.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /users:
    get:
      summary: Lists users
      operationId: listUsers
      tags:
      - user
      security:
      - sessionToken: []
      - sessionCookie: []
      description: |
        Admin user requester would get full visibility of user info. Non-admin requester would only get minimal user info. 
        By passing in the appropriate options, you can also search for users in your disk and sort them.
      parameters:
      - in: query
        name: limit
        description: Maximum number of records to return
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
      - in: query
        name: offset
        description: The offset at which to start for pagination
        schema:
          type: integer
      - in: query
        name: orderBy
        description: >-
          Field to sort the user results by. Default order is by first by IsMain, then by IsAdmin and finally by username ASC.
        schema:
          type: string
          enum:
          - default
          - username
          - displayName
          - quotaBytes
          - usedBytes
          - createdAt
          - lastActivityAt
          - isAdmin
          - id
      - in: query
        name: reverse
        description: >-
          Whether to reverse the order by (aka ASC/DESC)
        schema:
          type: boolean
      - in: query
        name: search
        description: Pass an optional search string for looking up users
        schema:
          type: string
      responses:
        '200':
          description: Returns a list of users matching criteria
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/listFullUser'
                  - $ref: '#/components/schemas/listUser'
        '400':
          description: Returned if an input parameter was invalid.
        '401':
          description: Returned when the request is not properly authenticated
        '403':
          description: Returned if the user does not have permissions to list users.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    post:
      summary: Create new user
      operationId: addUser
      tags:
      - user
      security:
      - sudoToken: []
      description: Adds a new user to your disk.
      responses:
        '201':
          description: Returned if the user creation was successful.
          headers:
            Location:
              description: The url to GET the new user.
              schema:
                type: string
            X-ID:
              description: The ID of the new user.
              schema:
                type: integer
                format: int64
            X-Username:
              description: The username of the new user.
              schema:
                type: string
        '400':
          description: >-
            Returned if the request is not valid and the user could not be
            created.
        '401':
          description: Returned when the request is not properly authenticated
        '403':
          description: Returned if the user does not have permissions to create users.
        '409':
          description: Returned if a user with the given username already exists.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage to create a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUser'
        description: The user to add
        required: true

  '/user-id/{username}':
    get:
      summary: Get user ID for the username
      operationId: getUserID
      tags:
      - user
      security:
      - sessionToken: []
      - sessionCookie: []
      description: Return the user ID by its username.
      parameters:
      - in: path
        name: username
        description: The users username.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the user was found.
          headers:
            Location:
              description: The url to GET the user.
              schema:
                type: string
            X-ID:
              description: The ID of the user.
              schema:
                type: integer
                format: int64
            X-Username:
              description: The username of the user.
              schema:
                type: string
        '401':
          description: Returned when the request is not properly authenticated
        '403':
          description: Returned if the user does not have permissions to view users.
        '404':
          description: Returned if the user is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/users/{userID}':
    get:
      summary: Get user info
      operationId: readUser
      tags:
      - user
      security:
      - sessionToken: []
      - sessionCookie: []
      description: |
        Get information about a specific user. 
        Admin user requester would get full visibility of user info. Non-admin requester would only get minimal user info.
      parameters:
      - in: path
        name: userID
        description: The ID of the user.
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Returns the user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getFullUser'
                  - $ref: '#/components/schemas/getUser'
        '401':
          description: Returned when the request is not properly authenticated
        '403':
          description: Returned if the user does not have permissions to view users.
        '404':
          description: Returned if the user is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Update user
      operationId: updateUser
      tags:
      - user
      security:
      - sudoToken: []
      description: |
        Updates the information of an existing user.
      parameters:
      - in: path
        name: userID
        description: The ID of the user.
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Returned if the user update was successful.
          headers:
            Location:
              description: The url to GET the user.
              schema:
                type: string
            X-ID:
              description: The ID of the user.
              schema:
                type: integer
                format: int64
            X-Username:
              description: The username of the user.
              schema:
                type: string
        '400':
          description: >-
            Returned if the request is not valid and the user could not be
            updated. For instance when the password is not long enough.
        '401':
          description: Returned when the request is not properly authenticated
        '403':
          description: Returned if the user does not have permissions to update users.
        '404':
          description: Returned if the user is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser'
    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
      - user
      security:
      - sudoToken: []
      description: |
        Deletes a user and all his/her files and information.
      parameters:
      - in: path
        name: userID
        description: The ID of the user.
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Returned if the user is successfully deleted.
        '401':
          description: Returned when the request is not properly authenticated
        '403':
          description: Returned if the user does not have permissions to delete users.
        '404':
          description: Returned if the user does not exist.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /nodes:
    get:
      summary: Lists nodes
      operationId: listNodes
      tags:
      - node
      - trash
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: |
        By passing in the appropriate options, you can list nodes
        in your disk, search for them and sort them.
      parameters:
      - in: query
        name: parentID
        description: >-
          ID of the parent node to list nodes from. Defaults to the files/
          root.
        schema:
          type: integer
          format: int64
      - in: query
        name: depth
        description: The depth to list nodes for. One means direct children only.
        schema:
          type: integer
          minimum: 1
          default: 1
      - in: query
        name: limit
        description: Maximum number of records to return
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
      - in: query
        name: offset
        description: The offset at which to start for pagination
        schema:
          type: integer
      - in: query
        name: orderBy
        description: >-
          Field to sort the node results by (when number of matched nodes <
          50000). Option tag requires orderTagName. Default order is by name
          with directories on top
        schema:
          type: string
          enum:
          - default
          - id
          - name
          - size
          - mime
          - created
          - modified
          - shared
          - removedAt
          - tag
      - in: query
        name: reverse
        description: Whether to reverse the order by (aka ASC/DESC)
        schema:
          type: boolean
      - in: query
        name: orderTagName
        description: >-
          The name of the tag to sort the nodes by. Only does something if
          orderBy is tag.
        schema:
          type: string
      - in: query
        name: nodeType
        description: The nodeType to filter on. Value `all` means no filter.
        schema:
          type: string
          enum:
            - all
            - file
            - directory
      - in: query
        name: mediaType
        description: The metadata mediatype to filter on. Value `all` means no filter. Value `none` means not a media file.
        schema:
          type: string
          enum:
            - all
            - none
            - image
            - video
            - audio
      - in: query
        name: recursiveDirMediaType
        description: >-
          Set to true to also include directories that contain files with the
          given mediaType. Only works with mediaType of `image`, `video` or `audio`. Only
          includes directories on depth 1.
        schema:
          type: boolean
      - in: query
        name: search
        description: Pass an optional search string for searching nodes by name
        schema:
          type: string
      - in: query
        name: namePrefixInclude
        description: Pass an optional prefix string which node names have to match
        schema:
          type: string
      - in: query
        name: namePrefixExclude
        description: Pass an optional prefix string to exclude nodes which names match
        schema:
          type: string
      - in: query
        name: excludeParentID
        description: >-
          ID of the parent node to exclude nodes from. Can be used to search
          nodes in subdirectories, but not the current directory.
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: >-
            Returns a list of files and folders in the given directory matching
            criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNode'
        '400':
          description: Returned if an input parameter was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is allowed to view nodes.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /node-id:
    get:
      summary: Get node ID
      operationId: getNodeIDByPath
      tags:
      - node
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Returns the node ID for a given path.
      parameters:
      - in: query
        name: path
        description: The path of the node
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the node exists.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the node at the given path.
              schema:
                type: integer
                format: int64
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the node.
        '404':
          description: Returned if the node is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/node-parents/{nodeID}':
    get:
      summary: List nodes parents
      operationId: listParentNodes
      tags:
      - node
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Lists all parent nodes for the given node
      parameters:
      - in: path
        name: nodeID
        description: >-
          ID of the parent node to list nodes from. Defaults to the files/
          root.
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: includeSelf
        description: Lets the list include the node we are querying
        schema:
          type: boolean
      responses:
        '200':
          description: Returns a list of parent nodes with the top level node first
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parentNodes'
        '400':
          description: Returned if an input parameter was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is allowed to view nodes.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/nodes/{nodeID}':
    get:
      summary: Get node information
      operationId: readNode
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      tags:
      - node
      description: Retrieve a node by id
      parameters:
      - in: path
        name: nodeID
        description: ID of the node
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: >-
            Returned if the node exists. Contains a full representation of a
            node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNode'
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the node.
        '404':
          description: Returned if the node is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    post:
      summary: Copy a node
      operationId: copyNode
      tags:
      - node
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Copies an existing node to a new location.
      parameters:
      - in: path
        name: nodeID
        required: true
        description: ID of the node to be copied
        schema:
          type: integer
          format: int64
      - in: header
        name: X-Overwrite
        description: When specified and set to true, any existing files will be overwritten when encountered.
        schema:
          type: boolean
      responses:
        '201':
          description: Returned if the node copy was successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the node at the given path.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the node could not be
            copied.
            Returned if both path and parentID parameters are sent.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the node does not have permissions to copy the node.
        '404':
          description: Returned if the node is not found.
        '409':
          description: Returned if the target path already exists.
        '412':
          description: Returned if the parent node of the target path is not found.
        '423':
          description: >-
            Returned if a lock on the source or destination path could not be
            acquired.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage to copy the node.
        '508':
          description: Returned if the recursion level is too deep (>100 levels)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeUpdate'
        description: Parameters for the node to be copied.
        required: true
    put:
      summary: Move a node
      operationId: updateNode
      tags:
      - node
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Updates an existing node. Mostly used for moving it to a different path.
      parameters:
      - in: path
        name: nodeID
        description: ID of the node
        required: true
        schema:
          type: integer
          format: int64
      - in: header
        name: X-Overwrite
        description: When specified and set to true, any existing files will be overwritten when encountered.
        schema:
          type: boolean
      responses:
        '204':
          description: Returned if the node update was successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the node at the given path.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the node could not be
            updated.
            Returned if both path and parentID are sent.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the node does not have permissions to update the node.
        '404':
          description: Returned if the node is not found.
        '409':
          description: Returned if the target path already exists.
        '412':
          description: Returned if the parent node of the target path is not found.
        '423':
          description: >-
            Returned if a lock on the source or destination path could not be
            acquired.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeUpdate'
        description: Parameters for the node to be moved.
        required: true
    delete:
      summary: Delete node
      operationId: deleteNode
      tags:
      - node
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Delete an existing node, along with its children.
      parameters:
      - in: path
        name: nodeID
        description: ID of the node
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: Returned if the node is successfully deleted.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to delete the node.
        '404':
          description: Returned if the node does not exist.
        '423':
          description: Returned if a lock on the node path could not be acquired.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /node-events:
    get:
      summary: List node events
      operationId: listNodeEvents
      tags:
        - event
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: By passing in the appropriate options, you can list node events in your filesystem and filter on a specific timeframe, type and path.
      parameters:
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
        - in: query
          name: pathPrefix
          description: An optional prefix path filter for which to get events. Mutually exclusive with `parentPathNodeId`.
          schema:
            type: string
        - in: query
          name: parentPathNodeId
          description: The ID of the node in which all event paths should be located. Mutually exclusive with `pathPrefix`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: eventPathDepth
          description: |
            The depth of the path related to the `pathPrefix` or `parentPathNodeId` to filter the events by.
            At 1, only events for direct children of the parent are returned.
          schema:
            type: integer
        - in: query
          name: nodeId
          description: The node ID to filter the events by.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNodeEvents'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to
            destroy the node.
        '404':
          description: Returned if the `parentPathNodeId` could not be found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /node-events/stream:
    get:
      summary: Node event websocket
      operationId: nodeEventStream
      tags:
        - event
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        The node events stream endpoint provides a websocket connection to
        subscribe to live event in your disk. This allowes applications
        to live sync with file actions on a disk.
      parameters:
        - in: query
          name: pathPrefix
          description: The prefix node path to filter the node events on.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns a websocket connection which provides live node events,
            separated by a newline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNodeEvent'
        '400':
          description: Bad input parameter.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the currently authenticated user does not have rights.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      servers:
        - url: 'wss:///*.stack.storage/api/v2'

  /directories:
    post:
      summary: Create a directory
      operationId: createDirectory
      tags:
      - node
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Create a new directory at the given path.
      responses:
        '201':
          description: Returned if the directory creation was successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the new directory.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the directory could not be
            created.
        '401':
          description: Returned if the user is not logged in.
        '404':
          description: Returned if the new directories' parent directory does not exist.
        '403':
          description: Returned if the user is not allowed to create a directory (here).
        '409':
          description: Returned if a directory with the given name already exists.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the existing directory.
              schema:
                type: integer
                format: int64
        '412':
          description: >-
            Returned if the given parentID was not found, or does not below to
            the user. Also returned when the parentID is a file.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Returned if the user does not have enough space left on the disk.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newDirectoryInfo'
        required: true

  '/directories/{nodeID}/download':
    get:
      summary: Download directory
      operationId: downloadNodeIDDirectory
      tags:
      - download
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Downloads the directory for nodeID as an archive (ZIP/TAR)
      parameters:
      - in: path
        name: nodeID
        description: 'ID of the node (must be a directory, not a file)'
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: fileFormat
        description: Specifies the archive file format to use. Defaults to ZIP.
        schema:
          type: string
          enum:
          - zip
          - tar-gz
      responses:
        '200':
          description: >-
            Returned if the directories archive file was successfully created and
            served.
        '400':
          description: Returned if the node is a file.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            directory.
        '404':
          description: Returned if the node is not found.
        '423':
          description: Returned if one of the nodes is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /files-download:
    post:
      summary: Download multiple files
      description: Downloads the specified nodeIDs as an archive (ZIP/TAR)
      operationId: downloadNodeIDsArchivePOST
      tags:
      - download
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      parameters:
      - in: query
        name: fileFormat
        description: Specifies the archive file format to use. Defaults to zip.
        schema:
          type: string
          enum:
          - zip
          - tar-gz
      responses:
        '200':
          description: >-
            Returned if the specified nodeIDs archive file was succesfully
            created and served.
        '400':
          description: Returned if the request was not valid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            nodeID(s).
        '404':
          description: Returned if one of the nodes was not found.
        '423':
          description: Returned if one of the nodes is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeIDList'
        description: >-
          The IDs of the nodes to download. Can include both files and
          directories.
        required: true
  /files-download/{nodeIDs}:
    get:
      summary: Download multiple files
      description: Downloads the specified nodeIDs as an archive (ZIP/TAR)
      operationId: downloadNodeIDsArchiveGET
      tags:
      - download
      security:
      - sessionToken: [ ]
      - sessionCookie: [ ]
      - appToken: [ ]
      - teamBlueJWT: []
      parameters:
      - in: path
        name: nodeIDs
        description: 'IDs of the nodes to download in comma separated form, for example: "10,20,22,23". Can include both files and directories.'
        required: true
        schema:
          type: string
      - in: query
        name: fileFormat
        description: Specifies the archive file format to use. Defaults to zip.
        schema:
          type: string
          enum:
            - zip
            - tar-gz
      responses:
        '200':
          description: >-
            Returned if the specified nodeIDs archive file was succesfully
            created and served.
        '400':
          description: Returned if the request was not valid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            nodeID(s).
        '404':
          description: Returned if one of the nodes was not found.
        '423':
          description: Returned if one of the nodes is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /upload:
    post:
      summary: Upload new file
      operationId: uploadFile
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      tags:
      - upload
      description: |
        The files endpoint provides a way to upload files to your disk.
        It is different from other endpoints as it requires extra data to
        be passed in the header instead of the body as the body is used
        for the to-upload data.
      parameters:
      - in: header
        name: X-FileByteSize
        required: true
        description: The exact number of bytes of the file you are uploading. Maximum is 128 MiB. To upload larger sizes, use an upload session.
        schema:
          type: integer
          format: int64
          minimum: 0
      - in: header
        name: X-ParentID
        required: true
        description: The NodeID of the directory to upload this file into.
        schema:
          type: integer
          format: int64
      - in: header
        name: X-Filename
        required: true
        description: |
          The Base64 (RFC 4648) encoded filename for the newly uploaded file.
          The filename has a number of restrictions:
            - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
            - The name cannot equal . or ..
            - The name cannot contain unicode control characters
            - The name cannot contain these characters: / \ < > " | ? *
        schema:
          type: string
      - in: header
        name: X-Overwrite
        required: false
        description: >-
          Whether to overwrite any existing file on the given parentID + name.
          Default = false.
        schema:
          type: boolean
      - in: header
        name: X-Modified
        required: false
        description: >-
          Optional unix timestamp containing the file modification date to
          set.
        schema:
          type: integer
          format: int64
      - in: header
        name: X-SHA1-Checksum
        required: false
        description: >-
          Optional SHA1 HEX checksum of the contents of the file to be uploaded. The file contents will be hashed and checked prior to committing the file to the disk.
        schema:
          type: string
      requestBody:
        description: The contents of the file as raw bytes, exactly the amount as specified in `X-FileByteSize`.
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Returned if the file was uploaded successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the new file.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the file could not be
            uploaded.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to upload files.
        '404':
          description: Returned if the parentID does not exist.
        '409':
          description: Returned if a node with the given name already exists.
        '412':
          description: Returned if the parentID is a file instead of a directory.
        '422':
          description: Returned if the uploaded file size was incorrect.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable or was disabled while transferring. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage for the file.
  /upload/session/start:
    post:
      summary: Start upload session
      operationId: uploadSessionStart
      tags:
      - upload
      description: >-
        Starts an upload session. Upload sessions can have a maximum of 10 hours
        of inactivity before they will be automatically deleted.
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      parameters:
      - in: header
        name: X-FileByteSize
        required: true
        description: The total exact number of bytes of the file you are uploading.
        schema:
          type: integer
          minimum: 0
          format: int64
      - in: header
        name: X-ChunkByteSize
        required: true
        description: The size of the chunks you will be uploading. Should *always* be a multiple of 1 MiB (1024 x 1024 bytes). The minimum is 1 MiB, maximum is 128 MiB.
        schema:
          type: integer
          format: int64
          minimum: 1048576
          maximum: 134217728
      - in: header
        name: X-ParentID
        required: true
        description: The NodeID of the directory to upload this file into.
        schema:
          type: integer
          format: int64
      - in: header
        name: X-Filename
        required: true
        description: |
          The Base64 (RFC 4648) encoded filename for the newly uploaded file.
          The filename has a number of restrictions:
            - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
            - The name cannot equal . or ..
            - The name cannot contain unicode control characters
            - The name cannot contain these characters: / \ < > " | ? *
        schema:
          type: string
      - in: header
        name: X-Overwrite
        required: false
        description: Whether to overwrite any existing file on the given parentID + name.
        schema:
          type: boolean
      - in: header
        name: X-Modified
        required: false
        description: >-
          Optional unix timestamp containing the file modification date to
          set.
        schema:
          type: integer
          format: int64
      - in: header
        name: X-SHA1-Checksum
        required: false
        description: >-
          Optional SHA1 HEX checksum of the contents of the file to be uploaded. The file contents will be hashed and checked prior to committing the file to the disk.
        schema:
          type: string
      responses:
        '201':
          description: Returned if the file was uploaded successful.
          headers:
            X-SessionID:
              description: The unique ID of the new upload session.
              schema:
                type: string
        '400':
          description: >-
            Returned if the request is not valid and the file could not be
            uploaded.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to upload files.
        '404':
          description: Returned if the parentID does not exist.
        '409':
          description: Returned if a file with the given name already exists.
        '412':
          description: Returned if the parentID is a file instead of a directory.
        '420':
          description: Returned if the SHA1 checksum did not match the received contents.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable or was disabled while transferring. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage for the file.
  /upload/session/append:
    post:
      summary: Upload chunk for upload session
      operationId: uploadSessionAppend
      tags:
      - upload
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: |
        The files append endpoint provides a way to continue a chunked upload.
        By passing the upload session id you can continue uploading chunks for
        a single file.
      parameters:
      - in: header
        name: X-SessionID
        required: true
        description: The sessionID of the upload session.
        schema:
          type: string
      - in: header
        name: X-StartOffset
        required: true
        description: >-
          The start byte offset of the chunk you are uploading. Must be a
          multiple of the given `X-Chunk-ByteSize`.
        schema:
          type: integer
          format: int64
      requestBody:
        description: The contents of the chunk of the file as raw bytes, exactly the amount as specified in `X-ChunkByteSize` in the session start, *unless* it is the last chunk.
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Returned if the chunk was uploaded successful.
        '400':
          description: >-
            Returned if the request is not valid and the chunk could not be
            uploaded.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to upload chunks.
        '404':
          description: Returned if the upload session was not found.
        '409':
          description: >-
            Returned if the chunk was already uploaded or is already being
            uploaded.
        '422':
          description: Returned if the body size was incorrect.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage for the file.
  /upload/session/finish:
    post:
      summary: Complete upload session
      operationId: uploadSessionFinish
      tags:
      - upload
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: >-
        Finish an upload session and saves the uploaded data to the given file
        path.
      parameters:
      - in: header
        name: X-SessionID
        required: true
        description: The sessionID of the upload session.
        schema:
          type: string
      - in: header
        name: X-SHA1-Checksum
        required: false
        description: >-
          Optional SHA1 HEX checksum of the contents of the file to be uploaded. The file contents will be hashed and checked prior to committing the file to the disk.
        schema:
          type: string
      responses:
        '201':
          description: Returned if the file was uploaded successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the new file.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the file could not be
            uploaded.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to upload files.
        '404':
          description: Returned if the sessionID does not exist.
        '409':
          description: Returned if a file with the given name already exists.
        '412':
          description: Returned if not all chunks have been uploaded.
        '420':
          description: Returned if the SHA1 checksum did not match the received contents.
        '422':
          description: Returned if the uploaded file size was incorrect.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
        '507':
          description: Returned if the disk has insufficient storage for the file.
  /upload/session/abort:
    post:
      summary: Abort upload session
      operationId: uploadSessionAbort
      tags:
      - upload
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Aborts an upload session and removes all temporary upload session data.
      parameters:
      - in: header
        name: X-SessionID
        required: true
        description: The sessionID of the upload session.
        schema:
          type: string
      responses:
        '204':
          description: Returned if the session and its associated data was removed.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to upload files.
        '404':
          description: Returned if the sessionID does not exist.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/files/{nodeID}/download':
    get:
      summary: Download file
      operationId: downloadNodeIDFile
      tags:
      - download
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Returns the actual file contents for a file with given nodeID.
      parameters:
      - in: path
        name: nodeID
        description: 'ID of the node (must be a file, not a directory)'
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: noContentDisposition
        description: 'By default files are served with a Content-Disposition header, set this parameter to disable this header'
        required: false
        schema:
          type: boolean
      - in: header
        name: Range
        required: false
        description: >-
          The default HTTP range header allowing for partial downloads. See
          https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests for
          more information.
        schema:
          type: string
      responses:
        '200':
          description: Returned if the file was succesfully served.
        '400':
          description: Returned if the node is a directory or the parameters were invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to download the node.
        '404':
          description: Returned if the node is not found.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/files/{nodeID}/preview':
    get:
      summary: Generate preview
      operationId: previewNodeFile
      tags:
      - download
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: |
        Generates a preview of an image, video or office document.
        For images and videos, you can specify just 1 dimension to keep aspect ratio. When specifying both the result is cropped.
      parameters:
      - in: path
        name: nodeID
        description: ID of the node
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: format
        description: |
          The format of the resulting preview. When no format is specified the best fitting image format is chosen automatically.
          For image files the format has to be JPEG or PNG.
          PDF is only available for document files.
          MP4 is only available for video files.
        schema:
          type: string
          enum:
            - jpeg
            - png
            - mp4
            - pdf
      - in: query
        name: width
        description: Requested width of the preview
        schema:
          type: integer
          minimum: 0
          maximum: 3000
      - in: query
        name: height
        description: Requested height of the preview
        schema:
          type: integer
          minimum: 0
          maximum: 3000
      responses:
        '200':
          description: Returned if the the preview was succesfully created and served.
          content:
            'image/jpeg':
              schema:
                type: string
                format: binary
            'image/png':
              schema:
                type: string
                format: binary
            'video/mp4':
              schema:
                type: string
                format: binary
            'application/pdf':
              schema:
                type: string
                format: binary
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to preview the node.
        '404':
          description: Returned if the node is not found.
        '415':
          description: Returned if a preview could not be created for this type of node.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk or the preview service is currently unavailable. Retry the request later.

  /node-shares:
    get:
      summary: Lists shares
      operationId: listShares
      tags:
        - share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        By passing in the appropriate options, you can list shares
        in your disk, search for them and sort them.
      parameters:
        - in: query
          name: type
          description: >-
            The type of shares. Internal shares are shared to users from one account. 
            Public shares are the ones shared with an URL that is accessible by anyone with the URL.
          schema:
            type: string
            enum:
              - Public
              - Internal
        - in: query
          name: nodeID
          description: Pass an optional nodeID to list shares that contain the nodeID
          schema:
            type: integer
        - in: query
          name: limit
          description: Maximum number of records of shares to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - in: query
          name: offset
          description: The offset at which to start for pagination
          schema:
            type: integer
        - in: query
          name: orderBy
          description: >-
            Field to sort the share results by (when number of matched shares <
            50000). Default being the share type.
          schema:
            type: string
            enum:
              - default
              - type
              - urlToken
              - createdAt
              - expiresAt
              - updatedAt
              - nodeIsDir
              - nodeName
        - in: query
          name: reverse
          description: Whether to reverse the order by (aka ASC/DESC)
          schema:
            type: boolean
        - in: query
          name: search
          description: Pass an optional search string for searching shares by its url token
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of shares matching criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listShares'
        '400':
          description: Returned if the input was not correct.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not allowed to list shares.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    post:
      summary: Create new share
      operationId: createShare
      tags:
        - share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Creates new share for a node
      responses:
        '201':
          description: Returned if a new share was created for the node
          headers:
            X-ShareId:
              description: The shareID that uniquely identifies the share.
              schema:
                type: integer
                format: int64
            X-URLToken:
              description: The urlToken for accessing the share
              schema:
                type: string
        '400':
          description: Returned if the input was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the node does not have permissions to share the node.
        '404':
          description: Returned if the node does not exist.
        '409':
          description: (For public share only) Returned when the share urlToken is taken.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createShare'
        description: Node share properties
        required: true
  '/node-shares/{shareID}':
    get:
      summary: Get node share
      operationId: getShare
      tags:
        - share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Gets an existing share.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a share.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPublicShare'
        '400':
          description: Returned if the input was not correct.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is not allowed to get share.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    put:
      summary: Update node share
      operationId: updateShare
      tags:
        - share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
      description: Updates an existing share.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateShare'
        description: Node share properties
        required: true
      responses:
        '204':
          description: Returned if the share was updated.
          headers:
            X-ShareId:
              description: The shareID that uniquely identifies the share.
              schema:
                type: integer
                format: int64
        '400':
          description: Returned if the input was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to share the node.
        '404':
          description: Returned if the node and/or share does not exist.
        '409':
          description: (For public share only) Returned if the share urlToken is already taken.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

    delete:
      summary: Remove node share
      operationId: removeShare
      tags:
        - share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Remove a share by shareID
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Returned if the share for the node is removed.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to delete the node share.
        '404':
          description: Returned if the share does not exist.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /tags:
    get:
      summary: Lists user tags
      operationId: listTags
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Lists the available tags for the current user.
      responses:
        '200':
          description: Returns a list of tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTags'
        '401':
          description: Returned if the user is not logged in.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    post:
      summary: Create tag
      operationId: createTag
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Creates a new tag for the current user.
      responses:
        '201':
          description: Returned if the tag was created.
          headers:
            Location:
              description: The url to GET the tag.
              schema:
                type: string
            X-Name:
              description: The name of the tag.
              schema:
                type: string
        '400':
          description: Returned if parameters are invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to create tags.
        '409':
          description: Returned if a tag with the same name exists.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addTag'
        description: Tag properties
        required: true
  '/tags/{tagName}':
    get:
      summary: Get tag
      operationId: getTag
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Get a tag with a given name for the current user.
      parameters:
      - in: path
        name: tagName
        description: The name of the tag
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returns the tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTag'
        '401':
          description: Returned if the user is not logged in.
        '404':
          description: Returned if the tag was not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    delete:
      summary: Delete tag
      operationId: deleteTag
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Deletes a tag for the current user. Also results in all nodes with this tag being untagged.
      parameters:
      - in: path
        name: tagName
        description: The name of the tag
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the tag was deleted.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the user does not have permissions to delete tags. (or
            this tag)
        '404':
          description: Returned if the tag does not exist.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/tags/{tagName}/nodes':
    get:
      summary: List nodes for tag
      operationId: listNodesWithTag
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: >
        By passing in the appropriate options, you can list nodes with a given
        tag in your disk, search for them and sort them.
      parameters:
      - in: path
        name: tagName
        description: Name of the tag to list nodes for
        required: true
        schema:
          type: string
      - in: query
        name: limit
        description: Maximum number of records to return
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
      - in: query
        name: offset
        description: The offset at which to start for pagination
        schema:
          type: integer
      - in: query
        name: orderBy
        description: >-
          Field to sort the node results by (when number of matched nodes <
          50000). Option tag requires orderTagName. Default order is by name
          with directories on top.
        schema:
          type: string
          enum:
          - default
          - id
          - name
          - size
          - mime
          - created
          - modified
          - shared
      - in: query
        name: reverse
        description: Whether to reverse the order by (aka ASC/DESC)
        schema:
          type: boolean
      - in: query
        name: nodeType
        description: The nodeType to filter on. Value `all` means no filter.
        schema:
          type: string
          enum:
            - all
            - file
            - directory
      - in: query
        name: mediaType
        description: The metadata mediatype to filter on. Value `all` means no filter. Value `none` means not a media file.
        schema:
          type: string
          enum:
            - all
            - none
            - image
            - video
            - audio
      - in: query
        name: recursiveDirMediaType
        description: >-
          Set to true to also include directories that contain files with the
          given mediaType. Only works with mediaType of `image`, `video` or `audio`. Only
          includes directories on depth 1.
        schema:
          type: boolean
      - in: query
        name: search
        description: Pass an optional search string for searching nodes by name
        schema:
          type: string
      - in: query
        name: namePrefixInclude
        description: Pass an optional prefix string which node names have to match
        schema:
          type: string
      - in: query
        name: namePrefixExclude
        description: Pass an optional prefix string to exclude nodes which names match
        schema:
          type: string
      responses:
        '200':
          description: Returns a list of nodes with a given tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNode'
        '400':
          description: Bad input parameter
        '401':
          description: Returned if the user is not logged in.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/tags/{tagName}/nodes/{nodeID}':
    post:
      summary: Tag node
      operationId: tagNode
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Give the given node a tag with the given name. Both node and tag name must already exist.
      parameters:
      - in: path
        name: tagName
        description: The name of the tag
        required: true
        schema:
          type: string
      - in: path
        name: nodeID
        description: ID of the node to tag
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '201':
          description: Returned if the node was tagged.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to
            tag the node.
        '404':
          description: Returned if the node or tag does not exist.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    delete:
      summary: Untag node
      operationId: untagNode
      tags:
      - tag
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Removes the given tag from the given node. Both node and tag name must already exist.
      parameters:
      - in: path
        name: tagName
        description: The name of the tag
        required: true
        schema:
          type: string
      - in: path
        name: nodeID
        description: id of the node to untag
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: Returned if the node was untagged.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to
            untag the node.
        '404':
          description: Returned if the node or tag does not exist.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /trash:
    delete:
      summary: Empty trashbin
      operationId: emptyTrashbin
      tags:
      - trash
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: 'Empty the entire trashbin, permadeleting all the nodes contained within.'
      responses:
        '204':
          description: Returned if the trashbin was emptied.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to
            empty the trashbin.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/trash/{nodeID}':
    put:
      summary: Restore node
      operationId: restoreNode
      tags:
      - trash
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Restores a node from the trashbin back to /files, restoring it to the path given.
      parameters:
      - in: path
        name: nodeID
        description: ID of the node to restore
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: autoRename
        description: >-
          Whether to automatically append a number to the node name if the
          path already exists. (Defaults to false)
        schema:
          type: boolean
      - in: header
        name: X-Overwrite
        description: When specified and set to true, any existing files will be overwritten when encountered.
        schema:
          type: boolean
      responses:
        '200':
          description: >-
            Returned if the node was restored. The body contains the path to
            which the node was restored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeRestore'
        '400':
          description: Returned if a parameter was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to
            restore the node.
        '404':
          description: Returned if the node does not exist or is not in the trashbin.
        '409':
          description: Returned if a node already exists on the restore path.
        '412':
          description: Returned if the given parent dir of the given path does not exist.
        '423':
          description: Returned if the source or destination path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeRestore'
        description: The node path to move the restored file to.
        required: true
    delete:
      summary: Permadelete node
      operationId: destroyNode
      tags:
      - trash
      security:
      - sessionToken: []
      - sessionCookie: []
      - appToken: []
      - teamBlueJWT: []
      description: Remove a node from the trashbin, permadeleting it.
      parameters:
      - in: path
        name: nodeID
        description: ID of the node to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: Returned if the node was deleted.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the currently authenticated user does not have permissions.
        '404':
          description: Returned if the node does not exist or is not in the trashbin.
        '423':
          description: Returned if the path is locked.
        '429':
          description: Returned if there are too many requests for this disk.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal':
    get:
      summary: Get internal shares that are shared with the current disk user
      operationId: listInternalSharesGet
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Retrieve all the internal shares that are shared to the current disk user
      parameters:
        - in: query
          name: limit
          description: Maximum number of records of shares to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - in: query
          name: offset
          description: The offset at which to start for pagination
          schema:
            type: integer
        - in: query
          name: orderBy
          description: >-
            Field to sort the share results by (when number of matched shares <
            50000). Default being the share type.
          schema:
            type: string
            enum:
              - default
              - createdAt
              - updatedAt
              - nodeIsDir
              - nodeName
              - userID
        - in: query
          name: reverse
          description: Whether to reverse the order by (aka ASC/DESC)
          schema:
            type: boolean
        - in: query
          name: search
          description: Pass an optional search string for searching shares by its underlying node's name
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of internal shares that are shared to the current disk user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listInternalSharesWithoutAllowedUserIDs'
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to list shares.
        '404':
          description: Returned if the share is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}':
    get:
      summary: Get share info
      operationId: getInternalShare
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Retrieve information of an internal share
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns an internal share.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInternalShare'
        '400':
          description: Returned if the input was not correct or if the shareID corresponds to a non-internal share.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the share.
        '404':
          description: Returned if the share is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /shared-with-me/internal/{shareID}/nodes:
    get:
      summary: Get a list of nodes contained in an internal shared directory
      operationId: listInternalShareNodes
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        Get a list of nodes contained in an internally shared directory.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: parentID
          description: >-
            ID of the parent node to list nodes from. Defaults to the share root.
          schema:
            type: integer
            format: int64
        - in: query
          name: depth
          description: The depth to list nodes for. One means direct children only.
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
        - in: query
          name: limit
          description: Maximum number of records of nodes to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - in: query
          name: offset
          description: The offset at which to start for pagination
          schema:
            type: integer
            format: int64
        - in: query
          name: orderBy
          description: >-
            Field to sort the nodes results by (when number of matched nodes <
            50000). Default being the node name.
          schema:
            type: string
            enum:
              - default
              - name
              - mime
              - isDir
              - createdAt
              - updatedAt
        - in: query
          name: reverse
          description: Whether to reverse the order by (aka ASC/DESC)
          schema:
            type: boolean
        - in: query
          name: orderTagName
          description: >-
            The name of the tag to sort the nodes by. Only does something if
            orderBy is tag.
          schema:
            type: string
        - in: query
          name: nodeType
          description: The nodeType to filter on. Value `all` means no filter.
          schema:
            type: string
            enum:
              - all
              - file
              - directory
        - in: query
          name: mediaType
          description: The metadata mediatype to filter on. Value `all` means no filter. Value `none` means not a media file.
          schema:
            type: string
            enum:
              - all
              - none
              - image
              - video
              - audio
        - in: query
          name: recursiveDirMediaType
          description: >-
            Set to true to also include directories that contain files with the
            given mediaType. Only works with mediaType of `image`, `video` or `audio`. Only
            includes directories on depth 1.
          schema:
            type: boolean
        - in: query
          name: search
          description: Pass an optional search string for searching nodes by name.
          schema:
            type: string
        - in: query
          name: namePrefixInclude
          description: Pass an optional prefix string which node names have to match
          schema:
            type: string
        - in: query
          name: namePrefixExclude
          description: Pass an optional prefix string to exclude nodes which names match
          schema:
            type: string
        - in: query
          name: excludeParentID
          description: >-
            ID of the parent node to exclude nodes from. Can be used to search
            nodes in subdirectories, but not the current directory.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a list of nodes matching criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shareListNode'
        '400':
          description: Returned if the input was not correct or if the shareID corresponds to a file rather than directory.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permission to list nodes.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/node-id':
    get:
      summary: Get internal share nodeID
      operationId: getInternalShareNodeIDByPath
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Returns the node ID for a given path in the internal share.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: path
          description: The path of the node
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned if the node exists.
          headers:
            X-NodeID:
              description: The ID of the node at the given path.
              schema:
                type: integer
                format: int64
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the node.
        '404':
          description: Returned if the node is not found.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/node-parents/{nodeID}':
    get:
      summary: List internal share node parents
      operationId: listInternalShareParentNodes
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Lists all parent nodes for the given node in the internal share.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: nodeID
          description: >-
            ID of the parent node to list nodes from. Defaults to the files/
            root.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: includeSelf
          description: Lets the list include the node we are querying
          schema:
            type: boolean
      responses:
        '200':
          description: Returns a list of parent nodes with the top level node first
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parentNodes'
        '400':
          description: Returned if an input parameter was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is allowed to view nodes.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  /shared-with-me/internal/{shareID}/nodes/{nodeID}:
    get:
      summary: Get info of a node under internal share folder
      operationId: getInternalShareNode
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        Get information of a node contained in an internal share directory.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: nodeID
          description: The ID of node.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: >-
            Returned if the node exists. Contains a full representation of a
            node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNode'
        '400':
          description: Returned if the input was not correct or if the shareID corresponds to a file rather than directory.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the node.
        '404':
          description: Returned if the node is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/file/{nodeID}/preview':
    get:
      summary: Preview internal share file
      operationId: previewInternalShareFile
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        Generates a preview of an internal share image, video or office document.
        For images and videos, you can specify just 1 dimension to keep aspect ratio. When specifying both the result is cropped.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: nodeID
          description: ID of the node.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: format
          description: |
            The format of the resulting preview. When no format is specified the best fitting image format is chosen automatically.
            For image files the format has to be JPEG or PNG.
            PDF is only available for document files.
            MP4 is only available for video files.
          schema:
            type: string
            enum:
              - jpeg
              - png
              - mp4
              - pdf
        - in: query
          name: width
          description: Requested width of the preview
          schema:
            type: integer
            minimum: 0
            maximum: 3000
        - in: query
          name: height
          description: Requested height of the preview
          schema:
            type: integer
            minimum: 0
            maximum: 3000
      responses:
        '200':
          description: Returned if the the preview was successfully created and served.
          content:
            'image/jpeg':
              schema:
                type: string
                format: binary
            'image/png':
              schema:
                type: string
                format: binary
            'video/mp4':
              schema:
                type: string
                format: binary
            'application/pdf':
              schema:
                type: string
                format: binary
        '400':
          description: Returned if the input was not correct or if the shareID corresponds to a file rather than directory.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to preview the node.
        '404':
          description: Returned if the node is not found.
        '415':
          description: Returned if a preview could not be created for this type of node.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk or the preview service is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/directories':
    post:
      summary: Internal share create directory
      operationId: createInternalShareDirectory
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Create a new directory in a given parent path within the shareID folder.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Returned if the directory creation was successful.
          headers:
            X-NodeID:
              description: The node ID of the new directory.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the directory could not be created.
        '401':
          description: >-
            Returned if the shareID provided is not valid
            or if the user tries to do write operation on a readonly share.
        '403':
          description: Returned if the user is not allowed to create a directory (here).
        '404':
          description: Returned if sharing is not allowed for the disk or the share does not exist.
        '409' :
          description: Returned if a directory with the given name already exists.
          headers:
            X-NodeID:
              description: The node ID of the existing directory.
              schema:
                type: integer
                format: int64
        '412':
          description: >-
            Returned if the given parentID was not found, or does not belong to
            the share. Also returned when the parentID is a file.
        '423':
          description: Returned if the path is locked.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk or the create directory service is currently unavailable. Retry the request later.
        '507':
          description: Returned if the user does not have enough space left on the disk.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newDirectoryInfo'
        required: true

  '/shared-with-me/internal/{shareID}/files/{nodeID}/download':
    get:
      summary: Download internal share file
      operationId: downloadInternalShareFile
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Returns the actual file contents for a file with given NodeID under the share by shareID.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: nodeID
          description: ID of the node (must be a file, not a directory)
          required: true
          schema:
            type: integer
            format: int64
        - in: header
          name: Range
          required: false
          description: >-
            The default HTTP range header allowing for partial downloads. See
            https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests for
            more information.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the internal share file was successfully served.
        '304':
          description:
            Returned if the browser already has a cached version of the shared file to be downloaded.
        '400':
          description: >-
            Returned if the file in the share is a directory
            or the parameters provided were invalid.
        '403':
          description: Returned if the user does not have permissions to download the shared file.
        '404':
          description: Returned if sharing is not allowed for the disk or the share does not exist
        '423':
          description: Returned if the path is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/files-download':
    post:
      summary: Internal share download multiple files and/or folders
      operationId: downloadInternalShareNodeIDsArchivePOST
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Downloads the specified nodeIDs as an archive (ZIP/TAR) in an internal share
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: fileFormat
          description: Specifies the archive file format to use. Defaults to zip.
          schema:
            type: string
            enum:
              - zip
              - tar-gz
      responses:
        '200':
          description: >-
            Returned if the specified nodeIDs archive file was successfully
            created and served.
        '304':
          description:
            Returned if the browser already has a cached version of the file to be downloaded.
        '400':
          description: >-
              Returned if the internal share is a file
              or the parameters provided were invalid.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            nodeID(s).
        '404':
          description: Returned if one of the nodes was not found.
        '423':
          description: Returned if one of the nodes is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeIDList'
        description: >-
          The IDs of the nodes to download. Can include both files and
          directories.
        required: true

  '/shared-with-me/internal/{shareID}/files-download/{nodeIDs}':
    get:
      summary: Internal share download multiple files
      operationId: downloadInternalShareMultipleFiles
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Downloads the specified nodeIDs as an archive (ZIP/TAR) in an internal share
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: nodeIDs
          description: 'IDs of the nodes to download in comma separated form, for example: "10,20,22,23". Can include both files and directories.'
          required: true
          schema:
            type: string
        - in: query
          name: fileFormat
          description: Specifies the archive file format to use. Defaults to zip.
          schema:
            type: string
            enum:
              - zip
              - tar-gz
      responses:
        '200':
          description: >-
            Returned if the specified nodeIDs archive file was successfully
            created and served.
        '304':
          description:
            Returned if the browser already has a cached version of the files to be downloaded.
        '400':
          description: Returned if the parameters provided were invalid.
        '403':
          description: Returned if the user does not have permissions to download the nodeID(s).
        '404':
          description: Returned if one of the nodes was not found.
        '423':
          description: Returned if one of the nodes is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/directories/{nodeID}/download':
    get:
      summary: Internal share download directory
      operationId: downloadInternalShareDirectory
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: Downloads the directory by nodeID in the share as an archive (ZIP/TAR)
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: nodeID
          description: ID of the node (must be a directory, not a file)
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: fileFormat
          description: Specifies the archive file format to use. Defaults to ZIP.
          schema:
            type: string
            enum:
              - zip
              - tar-gz
      responses:
        '200':
          description: Returned if the directory archive file was successfully created and served.
        '304':
          description:
            Returned if the browser already has a cached version of the directory to be downloaded.
        '400':
          description: Returned if the node is a file.
        '401':
          description: Returned if the user does not have permissions to download the directory.
        '404':
          description: Returned if the node is not found.
        '423':
          description: Returned if one of the nodes is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/node-events':
    get:
      summary: List node events
      operationId: InternalShareListNodeEvents
      tags:
        - internal-share
        - event
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: By passing in the appropriate options, you can list node events in your internal share filesystem and filter on a specific timeframe, type and path.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
            format: int64
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
            format: int64
        - in: query
          name: pathPrefix
          description: An optional prefix path filter for which to get events. Mutually exclusive with `parentPathNodeId`.
          schema:
            type: string
        - in: query
          name: parentPathNodeID
          description: The ID of the node in which all event paths should be located. Mutually exclusive with `pathPrefix`.
          schema:
            type: integer
            format: int64
        - in: query
          name: eventPathDepth
          description: |
            The depth of the path related to the `pathPrefix` or `parentPathNodeID` to filter the events by.
            At 1, only events for direct children of the parent are returned.
          schema:
            type: integer
            format: int64
        - in: query
          name: nodeID
          description: The node ID to filter the events by.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNodeEvents'
        '400':
          description: Bad input parameter.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to list the node events.
        '404':
          description: Returned if the `parentPathNodeID` could not be found.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the share is currently unavailable. Retry the request later.

  '/shared-with-me/internal/{shareID}/node-events/stream':
    get:
      summary: Node event websocket
      operationId: InternalShareNodeEventStream
      tags:
        - internal-share
        - event
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        The node events stream endpoint provides a websocket connection to
        subscribe to live event in your internal share. This allows applications
        to live sync with file actions on a internal share.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: pathPrefix
          description: The prefix node path to filter the node events on.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns a websocket connection which provides live node events,
            separated by a newline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNodeEvent'
        '400':
          description: Bad input parameter.
        '403':
          description: Returned if the currently authenticated user does not have rights.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the share is currently unavailable. Retry the request later.
      servers:
        - url: 'wss:///*.stack.storage/api/v2'

  '/shared-with-me/internal/{shareID}/upload':
    post:
      summary: Internal share upload new file
      operationId: UploadInternalShareFile
      tags:
        - internal-share
      security:
        - sessionToken: []
        - sessionCookie: []
        - appToken: []
        - teamBlueJWT: []
      description: |
        The files endpoint provides a way to upload files to your internal share.
        It is different from other endpoints as it requires extra data to
        be passed in the header instead of the body as the body is used
        for the to-upload data.
      parameters:
        - in: path
          name: shareID
          description: The shareID that uniquely identifies the share.
          required: true
          schema:
            type: integer
            format: int64
        - in: header
          name: X-FileByteSize
          required: true
          description: The exact number of bytes of the file you are uploading.
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 134217728
        - in: header
          name: X-ParentID
          required: true
          description: The NodeID of the directory to upload this file into.
          schema:
            type: integer
            format: int64
        - in: header
          name: X-Filename
          required: true
          description: |
            The Base64 (RFC 4648) encoded filename for the newly uploaded file. The filename has to not exist yet.
            The filename has a number of restrictions:
              - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
              - The name cannot equal . or ..
              - The name cannot contain unicode control characters
              - The name cannot contain these characters: / \ < > " | ? *
          schema:
            type: string
        - in: header
          name: X-Overwrite
          required: false
          description: >-
            Whether to overwrite any existing file on the given parentID + name.
            Default = false.
          schema:
            type: boolean
        - in: header
          name: X-Modified
          required: false
          description: >-
            Optional unix timestamp containing the file modification date to
            set.
          schema:
            type: integer
            format: int64
        - in: header
          name: X-SHA1-Checksum
          required: false
          description: >-
            Optional SHA1 HEX checksum of the contents of the file to be uploaded. The file contents will be hashed and checked prior to committing the file to the disk.
          schema:
            type: string
      requestBody:
        description: The contents of the file as raw bytes, exactly the amount as specified in `X-FileByteSize`.
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Returned if the file was uploaded successful.
          headers:
            X-NodeID:
              description: The node ID of the new file.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the file could not be
            uploaded.
        '403':
          description: Returned if the user does not have permissions to upload files.
        '404':
          description: Returned if the parentID does not exist.
        '409':
          description: Returned if a node with the given name already exists.
        '412':
          description: Returned if the parentID is a file instead of a directory.
        '413':
          description: Returned if you attempt to upload a file that is too large.
        '422':
          description: Returned if the uploaded file size was incorrect.
        '423':
          description: Returned if the path is locked.
        '451':
          description: Returned if the share is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the share is currently unavailable or was disabled while transferring. Retry the request later.
        '507':
          description: Returned if the share has insufficient storage for the file.

  '/share/{shareURLToken}':
    post:
      summary: Authorize share token
      operationId: authorizeShare token
      tags:
      - public-share
      description: >-
        Gets a public share token for interacting with public shares. Optionally requires a password when the share declares it so.
      parameters:
      - in: header
        name: X-SetCookie
        description: Set to `true` to let the server return a `SetCookie` header for the newly created token.
        schema:
          type: boolean
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shareToken'
      responses:
        '201':
          description: Returned when the share token was successfully created.
          headers:
            X-ShareToken:
              description: The share token that has been created.
              schema:
                type: string
            X-CSRF-Token:
              description: The CSRF token belonging to this share token.
              schema:
                type: string
        '400':
          description: Returned when the existing share token was not found.
        '401':
          description: Returned when a password was not provided or incorrect.
        '404':
          description: Returned when the share was not found.
        '412':
          description: Returned when the share has expired.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
    get:
      summary: Public share info
      operationId: getShareInfo
      tags:
      - public-share
      security:
      - shareToken: []
      - shareSession: []
      description: >-
        Gets a public share information object.
      parameters:
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returned if the share was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getShareByToken'
        '401':
          description: >-
            Returned if the share was found, but the password was not provided
            or incorrect.
        '404':
          description: Returned if the share (token) was not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/nodes':
    get:
      summary: List public share nodes
      operationId: getShareNodes
      tags:
      - public-share
      security:
      - shareToken: []
      - shareSession: []
      description: Get a list of nodes contained in the publicly shared directory
      parameters:
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      - in: query
        name: parentID
        description: >-
          ID of the parent node to list nodes from. Defaults to the share
          root.
        schema:
          type: integer
          format: int64
      - in: query
        name: depth
        description: The depth to list nodes for. One means direct children only.
        schema:
          type: integer
          minimum: 1
          default: 1
      - in: query
        name: limit
        description: Maximum number of records to return
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
      - in: query
        name: offset
        description: The offset at which to start for pagination
        schema:
          type: integer
      - in: query
        name: orderBy
        description: >-
          Field to sort the node results by (when number of matched nodes <
          50000). Default order is by name with directories on top.
        schema:
          type: string
          enum:
          - default
          - id
          - name
          - size
          - mime
          - created
          - modified
          - tag
      - in: query
        name: reverse
        description: Whether to reverse the order by (aka ASC/DESC)
        schema:
          type: boolean
      - in: query
        name: orderTagName
        description: >-
          The name of the tag to sort the nodes by. Only does something if
          orderBy is tag.
        schema:
          type: string
      - in: query
        name: nodeType
        description: The nodeType to filter on. Value `all` means no filter.
        schema:
          type: string
          enum:
            - all
            - file
            - directory
      - in: query
        name: mediaType
        description: The metadata mediatype to filter on. Value `all` means no filter. Value `none` means not a media file.
        schema:
          type: string
          enum:
            - all
            - none
            - image
            - video
            - audio
      - in: query
        name: recursiveDirMediaType
        description: >-
          Set to true to also include directories that contain files with the
          given mediaType. Only works with mediaType of `image`, `video` or `audio`. Only
          includes directories on depth 1.
        schema:
          type: boolean
      - in: query
        name: search
        description: Pass an optional search string for searching nodes by name
        schema:
          type: string
      - in: query
        name: namePrefixInclude
        description: Pass an optional prefix string which node names have to match
        schema:
          type: string
      - in: query
        name: namePrefixExclude
        description: Pass an optional prefix string to exclude nodes which names match
        schema:
          type: string
      - in: query
        name: excludeParentID
        description: >-
          ID of the parent node to exclude nodes from. Can be used to search
          nodes in subdirectories, but not the current directory.
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Returns a list of nodes matching criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shareListNode'
        '400':
          description: Returned if the input was not correct.
        '401':
          description: Returned if the share password is not given or incorrect.
        '404':
          description: Returned if the share was not found or the parentID was not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/node-id':
    get:
      summary: Get public share nodeID
      operationId: getShareNodeIDByPath
      tags:
      - public-share
      security:
      - shareToken: []
      - shareSession: []
      description: Returns the node ID for a given path in the public share.
      parameters:
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      - in: query
        name: path
        description: The path of the node
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the node exists.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the node at the given path.
              schema:
                type: integer
                format: int64
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the node.
        '404':
          description: Returned if the node is not found.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/node-parents/{nodeID}':
    get:
      summary: List public share node parents
      operationId: listShareParentNodes
      tags:
      - public-share
      security:
      - shareToken: []
      - shareSession: []
      description: Lists all parent nodes for the given node in the public share.
      parameters:
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      - in: path
        name: nodeID
        description: >-
          ID of the parent node to list nodes from. Defaults to the files/
          root.
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: includeSelf
        description: Lets the list include the node we are querying
        schema:
          type: boolean
      responses:
        '200':
          description: Returns a list of parent nodes with the top level node first
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parentNodes'
        '400':
          description: Returned if an input parameter was invalid.
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user is allowed to view nodes.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/nodes/{nodeID}':
    get:
      summary: Get public share node
      operationId: readShareNode
      tags:
      - public-share
      security:
      - shareToken: []
      - shareSession: []
      description: Retrieve node information by ID contained within the public share.
      parameters:
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      - in: path
        name: nodeID
        description: ID of the node
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: >-
            Returned if the node exists. Contains a full representation of a
            node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNode'
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to view the node.
        '404':
          description: Returned if the node is not found.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/files/{nodeID}/preview':
    get:
      summary: Public share node image preview
      operationId: previewShareNodeFile
      tags:
      - public-share
      security:
      - shareToken: []
      - shareSession: []
      description: |
        Generates a preview of a shared image, video or office document.
        For images and videos, you can specify just 1 dimension to keep aspect ratio. When specifying both the result is cropped.
      parameters:
      - in: path
        name: shareURLToken
        description: ID of the share
        required: true
        schema:
          type: string
      - in: path
        name: nodeID
        description: ID of the node
        required: true
        schema:
          type: integer
          format: int64
      - in: query
        name: format
        description: |
          The format of the resulting preview. When no format is specified the best fitting image format is chosen automatically.
          For image files the format has to be JPEG or PNG.
          PDF is only available for document files.
          MP4 is only available for video files.
        schema:
          type: string
          enum:
            - jpeg
            - png
            - mp4
            - pdf
      - in: query
        name: width
        description: Requested width of the preview
        schema:
          type: integer
          minimum: 0
          maximum: 3000
      - in: query
        name: height
        description: Requested height of the preview
        schema:
          type: integer
          minimum: 0
          maximum: 3000
      responses:
        '200':
          description: Returned if the the preview was successfully created and served.
          content:
            'image/jpeg':
              schema:
                type: string
                format: binary
            'image/png':
              schema:
                type: string
                format: binary
            'video/mp4':
              schema:
                type: string
                format: binary
            'application/pdf':
              schema:
                type: string
                format: binary
        '401':
          description: Returned if the user is not logged in.
        '403':
          description: Returned if the user does not have permissions to preview the node.
        '404':
          description: Returned if the node is not found.
        '415':
          description: Returned if a preview could not be created for this type of node.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk or the preview service is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/directories':
    post:
      summary: Public share create directory
      operationId: createSharedDirectory
      tags:
        - public-share
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: Create a new directory in a given parent path.
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Returned if the directory creation was successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the new directory.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the directory could not be created.
        '401':
          description: >-
            Returned if the X-ShareToken is not provided
            or if the X-ShareToken provided is not valid
            or if the user tries to do write operation on a readonly share.
        '403':
          description: Returned if the user is not allowed to create a directory (here).
        '404':
          description: Returned if sharing is not allowed for the disk or the share does not exist.
        '409' :
           description: Returned if a directory with the given name already exists.
           headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the existing directory.
              schema:
                type: integer
                format: int64
        '412':
          description: >-
            Returned if the given parentID was not found, or does not below to
            the share. Also returned when the parentID is a file.
        '423':
          description: Returned if the path is locked.
        '451':
          description: Returned if the disk is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk or the create directory service is currently unavailable. Retry the request later.
        '507':
          description: Returned if the user does not have enough space left on the disk.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newDirectoryInfo'
        required: true
  '/share/{shareURLToken}/files/{nodeID}/download':
    get:
      summary: Public share download single file
      operationId: downloadSharedNodeIDFile
      tags:
        - public-share
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: Returns the actual file contents for a file with given nodeID.
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: path
          name: nodeID
          description: ID of the node to be downloaded (must be a file, not a directory)
          required: true
          schema:
            type: integer
            format: int64
        - in: header
          name: Range
          required: false
          description: >-
            The default HTTP range header allowing for partial downloads. See
            https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests for
            more information.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the file was succesfully served.
        '304':
          description:
            Returned if the browser already has a cached version of the file to be downloaded.
        '400':
          description: >-
            Returned if the node is a directory
            or the parameters provided were invalid.
        '401':
          description: >-
            Returned if the X-ShareToken is not provided
            or if the X-ShareToken provided is not valid.
        '403':
          description: Returned if the user does not have permissions to download the node.
        '404':
          description: Returned if sharing is not allowed for the disk or the share does not exist
        '423':
          description: Returned if the path is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/files-download':
    post:
      summary: Public share download multiple files
      operationId: downloadSharedNodeIDsArchivePOST
      tags:
        - public-share
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: Downloads the specified nodeIDs as an archive (ZIP/TAR) in a public share
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: query
          name: fileFormat
          description: Specifies the archive file format to use. Defaults to zip.
          schema:
            type: string
            enum:
              - zip
              - tar-gz
      responses:
        '200':
          description: >-
            Returned if the specified nodeIDs archive file was successfully
            created and served.
        '304':
          description:
            Returned if the browser already has a cached version of the file to be downloaded.
        '400':
          description: >-
            Returned if the public share is a file
            or the parameters provided were invalid.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            nodeID(s).
        '404':
          description: Returned if one of the nodes was not found.
        '423':
          description: Returned if one of the nodes is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeIDList'
        description: >-
          The IDs of the nodes to download. Can include both files and
          directories.
        required: true
  '/share/{shareURLToken}/files-download/{nodeIDs}':
    get:
      summary: Public share download multiple files
      operationId: downloadSharedNodeIDsArchiveGET
      tags:
        - public-share
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: Downloads the specified nodeIDs as an archive (ZIP/TAR) in a public share
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: path
          name: nodeIDs
          description: 'IDs of the nodes to download in comma separated form, for example: "10,20,22,23". Can include both files and directories.'
          required: true
          schema:
            type: string
        - in: query
          name: fileFormat
          description: Specifies the archive file format to use. Defaults to zip.
          schema:
            type: string
            enum:
              - zip
              - tar-gz
      responses:
        '200':
          description: >-
            Returned if the specified nodeIDs archive file was successfully
            created and served.
        '304':
          description:
            Returned if the browser already has a cached version of the file to be downloaded.
        '400':
          description: >-
            Returned if the node is a directory
            or the parameters provided were invalid.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            nodeID(s).
        '404':
          description: Returned if one of the nodes was not found.
        '423':
          description: Returned if one of the nodes is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/directories/{nodeID}/download':
    get:
      summary: Public share download directory
      operationId: downloadSharedNodeIDDirectory
      tags:
        - public-share
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: Downloads the directory for nodeID as an archive (ZIP/TAR)
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: path
          name: nodeID
          description: 'ID of the node (must be a directory, not a file)'
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: fileFormat
          description: Specifies the archive file format to use. Defaults to ZIP.
          schema:
            type: string
            enum:
              - zip
              - tar-gz
      responses:
        '200':
          description: >-
            Returned if the directories archive file was successfully created and
            served.
        '304':
          description:
            Returned if the browser already has a cached version of the directory to be downloaded.
        '400':
          description: Returned if the node is a file.
        '403':
          description: >-
            Returned if the user does not have permissions to download the
            directory.
        '404':
          description: Returned if the node is not found.
        '423':
          description: Returned if one of the nodes is locked.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/node-events':
    get:
      summary: List node events
      operationId: SharedlistNodeEvents
      tags:
        - public-share
        - event
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: By passing in the appropriate options, you can list node events in your public share filesystem and filter on a specific timeframe, type and path.
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: query
          name: limit
          description: The maximum amount of events to retrieve.
          schema:
            type: integer
            default: 200
            maximum: 1000
        - in: query
          name: fromEventId
          description: The eventId at which to start listing events. Mutually exclusive with `start`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: start
          description: Unix timestamp indicating the start time to get events for. Mutually exclusive with `fromEventId`.
          schema:
            type: integer
        - in: query
          name: end
          description: Unix timestamp indicating the end time to get events for.
          schema:
            type: integer
        - in: query
          name: pathPrefix
          description: An optional prefix path filter for which to get events. Mutually exclusive with `parentPathNodeId`.
          schema:
            type: string
        - in: query
          name: parentPathNodeId
          description: The ID of the node in which all event paths should be located. Mutually exclusive with `pathPrefix`.
          schema:
            type: integer
            format: uint64
        - in: query
          name: eventPathDepth
          description: |
            The depth of the path related to the `pathPrefix` or `parentPathNodeId` to filter the events by.
            At 1, only events for direct children of the parent are returned.
          schema:
            type: integer
        - in: query
          name: nodeId
          description: The node ID to filter the events by.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a list of events matching given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNodeEvents'
        '400':
          description: Bad input parameter.
        '403':
          description: >-
            Returned if the currently authenticated user does not have rights to
            destroy the node.
        '404':
          description: Returned if the `parentPathNodeId` could not be found.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the share is currently unavailable. Retry the request later.
  '/share/{shareURLToken}/node-events/stream':
    get:
      summary: Node event websocket
      operationId: SharedNodeEventStream
      tags:
        - public-share
        - event
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: |
        The node events stream endpoint provides a websocket connection to
        subscribe to live event in your public share. This allowes applications
        to live sync with file actions on a public share.
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: query
          name: pathPrefix
          description: The prefix node path to filter the node events on.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns a websocket connection which provides live node events,
            separated by a newline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNodeEvent'
        '400':
          description: Bad input parameter.
        '403':
          description: Returned if the currently authenticated user does not have rights.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the share is currently unavailable. Retry the request later.
      servers:
        - url: 'wss:///*.stack.storage/api/v2'
  '/share/{shareURLToken}/upload':
    post:
      summary: Public share upload new file
      operationId: UploadSharedFile
      tags:
        - public-share
      security:
        - shareToken: [ ]
        - shareSession: [ ]
      description: |
        The files endpoint provides a way to upload files to your public share.
        It is different from other endpoints as it requires extra data to
        be passed in the header instead of the body as the body is used
        for the to-upload data.
      parameters:
        - in: path
          name: shareURLToken
          description: ID of the share
          required: true
          schema:
            type: string
        - in: header
          name: X-FileByteSize
          required: true
          description: The exact number of bytes of the file you are uploading.
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 134217728
        - in: header
          name: X-ParentID
          required: true
          description: The NodeID of the directory to upload this file into.
          schema:
            type: integer
            format: int64
        - in: header
          name: X-Filename
          required: true
          description: |
            The Base64 (RFC 4648) encoded filename for the newly uploaded file. The filename has to not exist yet.
            The filename has a number of restrictions:
              - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
              - The name cannot equal . or ..
              - The name cannot contain unicode control characters
              - The name cannot contain these characters: / \ < > " | ? *
          schema:
            type: string
        - in: header
          name: X-Overwrite
          required: false
          description: >-
            Whether to overwrite any existing file on the given parentID + name.
            Default = false.
          schema:
            type: boolean
        - in: header
          name: X-Modified
          required: false
          description: >-
            Optional unix timestamp containing the file modification date to
            set.
          schema:
            type: integer
            format: int64
        - in: header
          name: X-SHA1-Checksum
          required: false
          description: >-
            Optional SHA1 HEX checksum of the contents of the file to be uploaded. The file contents will be hashed and checked prior to committing the file to the disk.
          schema:
            type: string
      requestBody:
        description: The contents of the file as raw bytes, exactly the amount as specified in `X-FileByteSize`.
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Returned if the file was uploaded successful.
          headers:
            Location:
              description: The url to GET the node.
              schema:
                type: string
            X-ID:
              description: The ID of the new file.
              schema:
                type: integer
                format: int64
        '400':
          description: >-
            Returned if the request is not valid and the file could not be
            uploaded.
        '403':
          description: Returned if the user does not have permissions to upload files.
        '404':
          description: Returned if the parentID does not exist.
        '409':
          description: Returned if a node with the given name already exists.
        '412':
          description: Returned if the parentID is a file instead of a directory.
        '413':
          description: Returned if you attempt to upload a file that is too large.
        '422':
          description: Returned if the uploaded file size was incorrect.
        '423':
          description: Returned if the path is locked.
        '451':
          description: Returned if the share is in readonly mode.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the share is currently unavailable or was disabled while transferring. Retry the request later.
        '507':
          description: Returned if the share has insufficient storage for the file.

  /misc/branding-logo:
    get:
      summary: Get the disks' branding logo
      operationId: getBrandingLogo
      tags:
        - misc
      description: Returns the disks's branding logo or 404 if none is set.
      responses:
        '200':
          description: Returns the image data.
          content:
            'image/gif':
              schema:
                type: string
                format: binary
            'image/jpeg':
              schema:
                type: string
                format: binary
            'image/png':
              schema:
                type: string
                format: binary
        '404':
          description: Returned if no logo is set by the main user of the disk.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.
  /misc/qrcode:
    get:
      summary: Generate QR image
      operationId: generateQRImage
      tags:
      - misc
      description: Encodes a given value into a QR code image that is returned.
      parameters:
      - in: query
        name: value
        description: The string value to be encoded into the QR code image.
        required: true
        schema:
          type: string
      - in: query
        name: format
        description: The image format to return.
        schema:
          type: string
          default: svg
          enum:
          - png
          - svg
      - in: query
        name: size
        description: The image width and height. Ignored for SVG format.
        schema:
          type: integer
          minimum: 100
          maximum: 800
          default: 250
      responses:
        '200':
          description: Returns the image data.
          content:
            'image/svg+xml':
              schema:
                type: string
                format: xml
            'image/png':
              schema:
                type: string
                format: binary
        '400':
          description: Returned when the value is empty, the format invalid or size invalid or out of range.
        '406':
          description: Returned when the given value could not be QR encoded.
        '429':
          description: Returned if there are too many requests for this disk.
        '500':
          description: Returned if the server errored and could not complete the request for unknown reasons.
        '503':
          description: Returned if the disk is currently unavailable. Retry the request later.

servers:
- url: 'https://*.stack.storage/api/v2'

components:
  securitySchemes:
    pre2FAToken:
      name: X-Pre2FAToken
      in: header
      type: apiKey
      description: >
        Uses a pre 2FA session token to authenticate. Use `/authenticate` to
        obtain a pre 2FA session token. Only issued when Two Factor
        Authentication is enabled for the user. Can only be used to verify a 2FA
        challenge and to obtain an `X-SessionToken`.
    sessionToken:
      name: X-SessionToken
      in: header
      type: apiKey
      description: >-
        Uses a session token to authenticate. Use `/authenticate` to obtain a
        session token.
    sessionCookie:
      name: SessionToken
      in: cookie
      type: apiKey
      description: >-
        Uses a session token to authenticate. Use `/authenticate` to obtain a session token.
        When using a cookie to authenticate, a secondary CSRF token is required to be present,
        either as `X-CSRF-Token` header or as GET `CSRF-Token` parameter.
        The CSRF token can be acquired directly from `/authenticate` or by GETting `/authenticate/csrf-token`
    sudoToken:
      name: X-SudoToken
      in: header
      type: apiKey
      description: >-
        Uses a sudo token to authenticate. Use `/authenticate/sudo` to obtain a sudo token.
    appToken:
      name: X-AppToken
      in: header
      type: apiKey
      description: >-
        Uses a App token to authenticate. Use `/authenticate/tokens` to obtain an app token.
        To authenticate a request using an App token specify the header `X-AppToken` with the given token string.

        For `GET` requests where custom headers are not possible, it is allowed to specify the token string in a `GET` parameter with the name `App-Token`,
        however, the GET parameter `CSRF-Token` should then also be present, filled with the string retrieved from the `GET /authenticate/csrf-token` request.
    shareToken:
      name: X-ShareToken
      in: header
      type: apiKey
      description: Used for all paths under `/share/{shareURLToken}/`. Use POST `/share/{shareURLToken}/` to get one.
    shareSession:
      name: ShareSession
      in: cookie
      type: apiKey
      description: >-
        Same token as a shareToken, but now as a cookie.
        When using a cookie to authenticate, a secondary CSRF token is required to be present,
        either as `X-CSRF-Token` header or as GET `CSRF-Token` parameter.
    teamBlueJWT: 
      type: http
      bearerFormat: JWT
      scheme: bearer
      description: >-
        Uses a JWT token (RFC 7519) to authenticate. More details see:
        https://teambluegroup.stoplight.io/docs/coe-documentation/ZG9jOjMxNjYyNjI-authentication

  schemas:
    status:
      type: object
      required:
      - ok
      properties:
        ok:
          type: boolean
          example: true
    version:
      type: object
      required:
      - version
      - apiVersion
      - apiVersionInt
      - buildDate
      properties:
        version:
          type: string
          example: 2.0.2-0-gb6a8cb3
        environment:
          type: string
          enum:
            - production
            - development
        apiVersion:
          type: string
          example: 2.0.0
        apiVersionInt:
          type: integer
          example: 2000
        buildDate:
          type: string
          example: '2017-05-11_16:23:50'
    authentication:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          example: s_jansen
        password:
          type: string
          example: SecritPassw0rd
        sessionDuration:
          type: integer
          example: 3600
          default: 86400
          minimum: 60
          maximum: 7776000
          description: The session duration in seconds.
    sudoAuth:
      type: object
      required:
      - password
      properties:
        password:
          type: string
          example: SecritPassw0rd
          description: The users password.
        sessionDuration:
          type: integer
          example: 600
          default: 1200
          minimum: 60
          maximum: 3600
          description: The session duration in seconds.
        label:
          type: string
          minLength: 4
          maxLength: 100
          description: The label given to the session in the database. Optional
          example: Changing my 2FA backup codes
    generate2FABackupCodes:
      type: object
      properties:
        backupCodes:
          type: integer
          default: 10
          minimum: 0
          maximum: 10
          description: The amount of 2FA backup codes to create and return.
    2FABackupCodes:
      type: array
      items:
        $ref: '#/components/schemas/2FABackupCode'
    2FABackupCode:
      type: object
      properties:
        backupCode:
          type: string
          example: +dfkjdDH8_9fhw_3mdfkn
          description: >-
            The 2FA backup code to verify the 2FA challenge when the
            user has lost his/her normal challenge device.
    authToken:
      type: object
      required:
      - id
      - type
      - createdAt
      - expiresAt
      - label
      properties:
        id:
          type: integer
          format: int64
          example: 1337
          description: The ID of the token
        tokenType:
          type: string
          enum:
          - Session
          - Sudo
          - App
          - WebDAV
          - SFTP
          example: App
          description: The type of token
        createdAt:
          type: integer
          example: 34356353535
          description: Unix timestamp when the token was created
        duration:
          type: integer
          example: 13371337
          description: >-
            The valid duration of the token in seconds. If extended, it will be
            extended with this duration or 1 month, whichever is lower.
        expiresAt:
          type: integer
          example: 89903473343
          description: Unix timestamp when the token will expire.
        label:
          type: string
          minLength: 4
          maxLength: 100
          description: The label given to the token in the database.
          example: Daves Iphone 6S ultra session
    authTokenList:
      type: object
      required:
      - authTokens
      properties:
        authTokens:
          type: array
          items:
            $ref: '#/components/schemas/authToken'
        total:
          type: integer
          example: 42
    updateToken:
      type: object
      required:
        - label
      properties:
        label:
          type: string
          minLength: 4
          maxLength: 100
          example: Dave's IPhone 6
          description: >-
            A useful label by which to identify the device behind the key. Must
            be between 4 and 100 bytes long.
    createToken:
      type: object
      required:
      - label
      properties:
        tokenType:
          type: string
          enum:
          - App
          - SFTP
          - WebDAV
          default: App
          example: SFTP
          description: The type of token to create.
        label:
          type: string
          minLength: 4
          maxLength: 100
          example: Dave's IPhone 6
          description: >-
            A useful label by which to identify the device behind the key. Must
            be between 4 and 100 bytes long.
        duration:
          type: integer
          format: int64
          example: 34893749843
          description: >-
            The time in seconds this token should be valid for. Can be up to a
            year. Option is mutually exclusive with expiresAt. If the token is
            extended, it will be extended with this duration or 1 month,
            whichever is lower.
        expiresAt:
          type: integer
          format: int64
          example: 34893749843
          description: >-
            The unix timestamp at which this token should expire. Can be up to 1
            year in the future. Option is mutually exclusive with duration. If
            the token is extended, it will be extended with the duration from
            now until then, or 1 month, whichever is lower.
    tokenRequest:
      type: object
      properties:
        extraData:
          type: string
          maxLength: 2000
          description: Optional string given to the token request that allows storing some extra information about the request.
    getDiskInfo:
      type: object
      properties:
        diskID:
          type: integer
          format: int64
          example: 12345
          description: The ID of the disk
        diskName:
          type: string
          example: diskname
          description: The name of the disk
        usedBytes:
          type: integer
          format: int64
          example: 50000
          description: The amount of bytes the disk has in use
        freeBytes:
          type: integer
          format: int64
          example: 42
          description: The amount of bytes the disk has free
        totalBytes:
          type: integer
          format: int64
          example: 50042
          description: The amount of bytes the disk has available in total
    getUserMe:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1337
          description: The ID of the user
        username:
          type: string
          example: dave
        displayName:
          type: string
          example: Dave
        language:
          type: string
          example: en_GB
        createdAt:
          type: integer
          format: int64
          example: 946681200
          description: The timestamp when the user was created.
        lastActivityAt:
          type: integer
          format: int64
          example: 946681200
          description: The timestamp when the user was last having activity.
        quotaBytes:
          type: integer
          format: int64
          example: 100000
          description: The users quota in bytes. Zero for no quota.
        usedBytes:
          type: integer
          format: int64
          example: 500
          description: The amount of bytes this user has in use
        totalBytes:
          type: integer
          format: int64
          example: 500
          description: The amount of bytes this user has available in total
        is2FAEnabled:
          type: boolean
          example: true
          description: Whether the user has Two Factor Authentication enabled.
        filesNodeID:
          type: integer
          format: int64
          example: 235
          description: The directory NodeID of the files/ path.
        trashbinNodeID:
          type: integer
          format: int64
          example: 235
          description: The directory NodeID of the files_trashbin/ path.
        trashbinFilesNodeID:
          type: integer
          format: int64
          example: 235
          description: The directory NodeID of the files_trashbin/files/ path.
        isAdmin:
          type: boolean
          example: true
          description: Whether the user is an administrator and is allowed to alter other users.
        isMain:
          type: boolean
          example: true
          description: Whether the user is the main user of this disk.

    authTokenEvent:
      type: object
      properties:
        type:
          type: string
          description: The type of the affected auth token.
          enum:
            - Session
            - Sudo
            - App
            - WebDAV
            - SFTP
        label:
          type: string
          example: MyLabel from Home
          description: The label of the affected auth token.
        extendDurationSeconds:
          type: integer
          format: int64
    getAuthTokenEvent:
      type: object
      properties:
        eventId:
          type: integer
          format: uint64
          description: A unique identifier for this event.
          example: 146295914347823327
        time:
          type: integer
          example: 1462959140
          description: The unix timestamp of the event.
        type:
          type: string
          enum:
            - create
            - prune
            - delete
          example: prune
        userId:
          type: integer
          example: 1
          description: The user id of the user the auth token is from.
        username:
          type: string
          example: testuser
          description: The username of the user the auth token is from.
        instigator:
          type: string
          example: otheruser
          description: The person/system that caused the event.
        data:
          $ref: '#/components/schemas/authTokenEvent'
    listAuthTokenEvents:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/getAuthTokenEvent'

    shareEvent:
      type: object
      properties:
        shareId:
          type: integer
          format: int64
          description: The ID of the share.
        path:
          type: string
          description: Path to the node that is shared.
          example: /files/path/to/my/share
        nodeId:
          type: integer
          format: int64
          description: The node id of the node that is shared.
        type:
          type: string
          description: The type of the share.
          enum:
            - Public
            - Internal
        isDir:
          type: boolean
          description: Is the share a directory?
        hasPassword:
          type: boolean
          description: Is there a password on the share?
        expiresAt:
          type: integer
          format: int64
          description: The unix timestamp of the share creation.
        description:
          type: string
          description: The share description.
        urlToken:
          type: string
          description: The URL token used to access the share
        permissions:
          $ref: '#/components/schemas/sharePermissions'
        token:
          type: string
          description: Use URLToken instead.
          deprecated: true
        allowUpload:
          type: boolean
          deprecated: true
          description: Use permissions instead.
    getShareEvent:
      type: object
      properties:
        eventId:
          type: integer
          format: uint64
          description: A unique identifier for this event.
          example: 146295914347823327
        time:
          type: integer
          example: 1462959140
          description: The unix timestamp of the event.
        type:
          type: string
          enum:
            - create
            - update
            - delete
          example: update
        userId:
          type: integer
          example: 1
          description: The user id of the user the auth token is from.
        username:
          type: string
          example: testuser
          description: The username of the user the auth token is from.
        instigator:
          type: string
          example: otheruser
          description: The person/system that caused the event.
        data:
          $ref: '#/components/schemas/shareEvent'
    listShareEvents:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/getShareEvent'

    userEvent:
      type: object
      properties:
        rootNodeId:
          type: integer
          format: int64
          description: The users root node id.
          example: 42
        isAdmin:
          type: boolean
          description: Is the user an admin?
        quota:
          type: integer
          format: int64
          description: The user quota.
        displayName:
          type: string
          description: The users display name.
    getUserEvent:
      type: object
      properties:
        eventId:
          type: integer
          format: uint64
          description: A unique identifier for this event.
          example: 146295914347823327
        time:
          type: integer
          example: 1462959140
          description: The unix timestamp of the event.
        type:
          type: string
          enum:
            - create
            - update
            - delete
            - updatePassword
            - enable2FA
            - disable2FA
            - backupCodeUsed
            - resetBackupCodes
            - reset2FASecret
          example: update
        userId:
          type: integer
          example: 1
          description: The user id of the user the auth token is from.
        username:
          type: string
          example: testuser
          description: The username of the user the auth token is from.
        instigator:
          type: string
          example: otheruser
          description: The person/system that caused the event.
        data:
          $ref: '#/components/schemas/userEvent'
    listUserEvents:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/getUserEvent'

    addUser:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: The username for the new user. Should be all lowercase and without whitespace.
          pattern: '^[a-z0-9_-]+$'
          example: dave
        password:
          type: string
          example: Secrit
        displayName:
          type: string
          example: Dave
        language:
          type: string
          example: en_GB
          enum:
          - en_GB
          - nl_NL
          - nl_BE
        quotaBytes:
          type: integer
          format: int64
          minimum: 10485760
          example: 123456789
          description: Quota for this user in bytes. Give 0 for no quota. Minimum quota is 10 MiB. Maximum quota is the size of the disk.

    getFullUser:
      allOf:
        - $ref: '#/components/schemas/getUser'
        - type: object
          properties:
            language:
              type: string
              example: en_GB
              enum:
                - en_GB
                - nl_NL
                - nl_BE
            createdAt:
              type: integer
              format: int64
              example: 946681200
              description: The timestamp when the user was created.
            lastActivityAt:
              type: integer
              format: int64
              example: 946681200
              description: The timestamp when the user was last having activity.
            quotaBytes:
              type: integer
              format: int64
              minimum: 10485760
              example: 123456789
              description: Quota for this user in bytes. Give 0 for no quota. Minimum quota is 10 MiB. Maximum quota is the size of the disk.
            usedBytes:
              type: integer
              format: int64
              example: 500
              description: The amount of bytes this user has in use
            totalBytes:
              type: integer
              format: int64
              example: 500
              description: The amount of bytes this user has available in total
            is2FAEnabled:
              type: boolean
              example: true
              description: Whether the user has Two Factor Authentication enabled.
            isAdmin:
              type: boolean
              example: true
              description: Whether the user is an administrator and is allowed to alter other users.
            isMain:
              type: boolean
              example: true
              description: Whether the user is the main user of this disk.

    getUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1337
          description: The ID of the user
        username:
          type: string
          example: dave
        displayName:
          type: string
          example: Dave

    updateSelf:
      type: object
      properties:
        displayName:
          type: string
          example: Dave
          maxLength: 100
        language:
          type: string
          example: en_GB
          maxLength: 10
          enum:
          - en_GB
          - nl_NL
          - nl_BE
    updateUser:
      type: object
      properties:
        displayName:
          type: string
          example: Dave
        language:
          type: string
          example: en_GB
          enum:
          - en_GB
          - nl_NL
          - nl_BE
        quotaBytes:
          type: integer
          format: int64
          example: 100000
          description: Quota in bytes
        removeQuota:
          type: boolean
          example: true
          description: Whether to remove user quota.
        password:
          type: string
          minLength: 8
          maxLength: 72
          description: The password the user will need to login with.
          example: Secrit
    updatePassword:
      type: object
      required:
      - password
      properties:
        password:
          type: string
          minLength: 8
          maxLength: 72
          description: The password the user will need to login with.
          example: SecritP4ssw0rd
    listUser:
      type: object
      required:
        - total
        - searchTotal
        - users
      properties:
        total:
          type: integer
          example: 42
        searchTotal:
          type: integer
          example: 21
        users:
          type: array
          items:
            $ref: '#/components/schemas/getUser'
    listFullUser:
      type: object
      required:
      - total
      - searchTotal
      - users
      properties:
        total:
          type: integer
          example: 42
        searchTotal:
          type: integer
          example: 21
        users:
          type: array
          items:
            $ref: '#/components/schemas/getFullUser'

    getNode:
      type: object
      required:
      - id
      - name
      - path
      - parentID
      - dir
      - mime
      - size
      - created
      - modified
      properties:
        id:
          type: integer
          format: int64
          example: 4242424242
        name:
          type: string
          example: ThisIsMyFirstFile.pdf
        path:
          type: string
          example: files/MySecretFolder/MySelfie.jpg
        parentID:
          type: integer
          format: int64
          example: 4242424111
        dir:
          type: boolean
          example: false
        mime:
          type: string
          example: image/png
        size:
          type: integer
          format: int64
          example: 104200124
          description: Size in bytes
        created:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        modified:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        childCount:
          type: integer
          format: int
          example: 8
          description: Number of direct children nodes
        tags:
          type: array
          items:
            type: string
            example: favorite
        metadata:
          $ref: '#/components/schemas/nodeMetadata'
        share:
          $ref: '#/components/schemas/legacyNodeShare'
        trashInfo:
          $ref: '#/components/schemas/nodeTrashInfo'

    getInternalSharePublic:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 142
          description: Id is the unique identifier of a share.
        userID:
          type: integer
          format: int64
          example: 1234
          description: The ID of the user that owns this share.
        nodeID:
          type: integer
          format: int64
          example: 1337
          description: The ID of the node of the root of the share.
        type:
          type: string
          enum:
            - Internal
            - Public
          example: Internal
          description: |
            The type of shares. Internal shares are shared to users from one account.
            Public shares are accessible by anyone with the URL.
        description:
          type: string
          description: A descriptive field for the share.
          example: This is a nice png file that I've shared for you.
        expiresAt:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp of when the share will expire.
        createdAt:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp of when the share was created.
        updatedAt:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp of when the share was last updated.
        permissions:
          $ref: '#/components/schemas/sharePermissions'
        node:
          $ref: '#/components/schemas/shareNode'

    getPublicShare:
      allOf:
        - $ref: '#/components/schemas/getInternalShare'
        - type: object
          properties:
            hasPassword:
              type: boolean
              example: false
              description: (Public share only) Is there a password on the share?
            urlToken:
              type: string
              description: (Public share only) The URL token used to access the public share.
              example: rwJSH1hs4Ln7wJe

    getInternalShare:
      allOf:
        - $ref: '#/components/schemas/getInternalSharePublic'
        - type: object
          properties:
            allowedUserIDs:
              type: array
              items:
                type: integer
              format: int64
              example: [1, 2, 3]
              description: (Internal share only) Array of user IDs (within one disk account) allowed to access the share.

    shareNode:
      type: object
      required:
      - id
      - parentID
      - name
      - dir
      - mime
      - size
      - childCount
      - created
      - modified
      properties:
        id:
          type: integer
          format: int64
          example: 24
          description: Id of the share node.
        parentID:
          type: integer
          format: int64
          example: 12
          description: Id of the parent node.
        name:
          type: string
          description: Name of the share node.
          example: ThisIsMyFirstFile.png
        dir:
          type: boolean
          example: false
          description: Whether the share node is a directory.
        mime:
          type: string
          example: image/png
          description: The mime type of the share node.
        size:
          type: integer
          format: int64
          example: 104200124
          description: Size in bytes.
        childCount:
          type: integer
          format: int
          example: 0
          description: Number of direct children nodes.
        created:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        modified:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        metadata:
          $ref: '#/components/schemas/nodeMetadata'

    nodeUpdate:
      type: object
      description: |
        Object containing node location and modified timestamp.
        You can set the location of the node in two ways:
          - You can specify the full path of the node using the `path` property.
          - Or you can specify both the parent node id using the `parentID` property
            and the `name` property to set the name of the node inside of its parent.
      properties:
        path:
          type: string
          example: files/NewPhotoDirectory/MyFirstSelfie.jpg
          description: |
            Note: Mutually exclusive with `parentID` and `name`.

            The path up to the parent directory has to exist.
            The name part of the path has a number of restrictions:
              - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
              - The name cannot equal . or ..
              - The name cannot contain unicode control characters
              - The name cannot contain these characters: / \ < > " | ? *
        parentID:
          type: integer
          format: int64
          example: 42
          description: |
            Note: Mutually exclusive with `path`.

            ID of the parent node to place this node in.
        name:
          type: string
          example: "New file name"
          description: |
            Note: Mutually exclusive with `path`.

            The name of the node after moving.
            The name has a number of restrictions:
              - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
              - The name cannot equal . or ..
              - The name cannot contain unicode control characters
              - The name cannot contain these characters: / \ < > " | ? *
        modified:
          type: integer
          format: int64
          example: 453536743678
          description: The file modification time to set. Only available for files.
    nodeRestore:
      type: object
      properties:
        path:
          type: string
          example: files/NewPhotoDirectory/MyFirstSelfie.jpg
          description: |
            The path to restore the node to.
            The path up to the parent directory has to exist.
            The name part of the path has a number of restrictions:
              - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
              - The name cannot equal . or ..
              - The name cannot contain unicode control characters
              - The name cannot contain these characters: / \ < > " | ? *

    nodeIDList:
      type: object
      required:
      - nodeIDs
      properties:
        nodeIDs:
          type: array
          items:
            type: integer
            format: int64
            example: 42
    newDirectoryInfo:
      type: object
      required:
      - name
      properties:
        parentID:
          type: integer
          format: int64
          example: 42
          description: "The nodeID of the parent directory where the new directory should be made in. Mutually exclusive with the `parentPath` parameter."
        parentPath:
          type: string
          example: files/My Pictures/The Year Of 2020
          description: "The path to the parent directory where the new directory should be made in. Mutually exclusive with the `parentID` parameter."
        name:
          type: string
          example: My New Directory of awesomeness
          description: |
            The name has a number of restrictions:
              - The maximum length of the characters cannot exceed 148 bytes (for ex. 148 ASCII characters or 37 emojis)
              - The name cannot equal . or ..
              - The name cannot contain unicode control characters
              - The name cannot contain these characters: / \ < > " | ? *

    listNode:
      type: object
      required:
      - total
      - searchTotal
      - totalSize
      - searchSize
      - nodes
      properties:
        total:
          type: integer
          example: 422
        searchTotal:
          type: integer
          example: 42
        totalSize:
          type: integer
          format: int64
          example: 343433618
          description: Size in bytes
        searchSize:
          type: integer
          format: int64
          example: 953618
          description: Size in bytes
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/getNode'
    listShares:
      type: object
      required:
      - total
      - searchTotal
      - shares
      properties:
        total:
          type: integer
          format: int64
          example: 422
        searchTotal:
          type: integer
          format: int64
          example: 42
        shares:
          type: array
          items:
            $ref: '#/components/schemas/getPublicShare'
    listInternalSharesWithoutAllowedUserIDs:
      type: object
      required:
        - total
        - searchTotal
        - shares
      properties:
        total:
          type: integer
          format: int64
          example: 422
        searchTotal:
          type: integer
          format: int64
          example: 42
        shares:
          type: array
          items:
            $ref: '#/components/schemas/getInternalSharePublic'
    parentNodes:
      type: object
      required:
      - nodes
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/getNode'

    nodeMetadata:
      type: object
      required:
      - mediaType
      properties:
        type:
          type: string
          enum:
          - none
          - image
          - video
          - audio
          example: video
          description: The type of media file.
        mediaType:
          type: integer
          enum:
          - 0
          - 1
          - 2
          - 3
          example: 1
          description: 'Integer variant of the type property, 0 = none, 1 = image, 2 = video, 3 = audio'
        width:
          type: integer
          example: 420
        height:
          type: integer
          example: 420
        orientation:
          type: integer
          example: 2
        aspectRatio:
          type: number
          example: 1.3333
        durationMs:
          type: integer
          format: uint32
          example: 458000

    legacyNodeShare:
      type: object
      deprecated: true
      required:
      - token
      - hasPassword
      - createdAt
      - allowUpload
      properties:
        shareId:
          type: integer
          format: int64
          description: The ID of the share.
        type:
          type: string
          description: Type of the share, will always be Public for this endpoint.
          enum:
            - Public
            - Internal
        urlToken:
          type: string
          description: The URL token used to access the public share.
          example: rwJSH1hs4Ln7wJe
        expiresAt:
          type: integer
          format: int64
          example: 35789453957
          description: Unix timestamp of the time the share will expire.
        hasPassword:
          type: boolean
          example: true
        permissions:
          $ref: '#/components/schemas/sharePermissions'
        description:
          type: string
          example: This is my share where you can find my vacation pictures from Mallorca.
          description: A descriptive field for the share.
        createdAt:
          type: integer
          format: int64
          example: 34587357034
          description: Unix timestamp of the time the share was created
        updatedAt:
          type: integer
          format: int64
          example: 34587357034
          description: Unix timestamp of the time the share was last updated
        token:
          type: string
          deprecated: true
          description: Old field for `urlToken`.
          example: rwJSH1hs4Ln7wJe
        allowUpload:
          type: boolean
          deprecated: true
          description: Whether the share has write permissions. Deprecated, use `permissions` instead.
          example: false

    sharePermissions:
      type: object
      description: A list of permissions for a share.
      properties:
        createFile:
          type: boolean
        createDirectory:
          type: boolean
        readFile:
          type: boolean
        readDirectory:
          type: boolean
        updateFile:
          type: boolean
        updateDirectory:
          type: boolean
        deleteFile:
          type: boolean
        deleteDirectory:
          type: boolean

    nodeTrashInfo:
      type: object
      required:
      - removedAt
      - originalName
      - originalParentPath
      properties:
        removedAt:
          type: integer
          format: int64
          example: 34587357034
          description: Unix timestamp
        originalName:
          type: string
          example: MyVeryFirstMovie.mov
        originalParentPath:
          type: string
          example: files/My Videos/Birthday

    addTag:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 30
          example: MyFavoriteImages
    getTag:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          example: favorite
    listTags:
      type: object
      required:
      - tags
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/getTag'

    getNodeEvent:
      type: object
      required:
      - time
      - type
      properties:
        eventId:
          type: integer
          format: uint64
          description: A unique identifier for this event.
          example: 146295914347823327
        time:
          type: integer
          example: 1462959140
          description: The unix timestamp of the event.
        type:
          type: string
          enum:
          - create
          - update
          - move
          - copy
          - trash
          - restore
          - delete
          example: trash
        id:
          type: integer
          example: 1
          description: The ID of the affected node.
        size:
          type: integer
          example: 1337
          format: int64
          description: The size of the node at the time of the event in bytes.
        path:
          type: string
          example: files/Welcome.gif
          description: The path of the affected node.
        mime:
          type: string
          example: image/gif
          description: The mimetype of the node at the time of the event.
        newId:
          type: integer
          example: 1
          description: The id of the node after a move or copy event.
        newPath:
          type: string
          example: files_trashbin/Welcome.gif
          description: The path of the node after a move or copy event.
    listNodeEvents:
      type: object
      required:
      - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/getNodeEvent'
    shareToken:
      type: object
      properties:
        password:
          type: string
          example: SecritPassw0rd
          description: The password for the share, optional.
    getShareByToken:
      type: object
      properties:
        sid:
          type: integer
          example: 4242
          description: The ID of the share. _Note_, this is separate from the Node ID.
        shareURLToken:
          type: string
          example: dfGkg6545hFv
          description: The token with which the share is accessed.
        shareID:
          type: string
          deprecated: true
          example: dfGkg6545hFv
          description: ! Do not USE ! The URL token with which the share is accessed. Use `shareURLToken` instead.
        allowUpload:
          type: boolean
          example: false
          description: Whether anonymous users are allowed to create directories and upload files inside the share.
        description:
          type: string
          example: Hello, this is a message left by the creator of this share. Download my stuff!
          description: An optional message that can be set on the share.
        language:
          type: string
          example: nl_NL
          description: The language with which the public share should be displayed.
        id:
          type: integer
          format: int64
          example: 4242424242
          description: The ID of the shares root node
        name:
          type: string
          example: ThisIsMyFirstFile.pdf
          description: The name of the shares root node
        dir:
          type: boolean
          example: false
          description: Whether the shares root node is a directory
        mime:
          type: string
          example: image/png
          description: The mime type of the shares root node
        size:
          type: integer
          format: int64
          example: 104200124
          description: The size in bytes of the shares root node
        created:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        modified:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        childCount:
          type: integer
          example: 42
          description: Number of direct children nodes
        metadata:
          $ref: '#/components/schemas/nodeMetadata'
    getShareListNode:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4242424242
        name:
          type: string
          example: ThisIsMyFirstFile.pdf
        path:
          type: string
          example: Shared Folder/MySelfie.jpg
        parentID:
          type: integer
          format: int64
          example: 4242424111
        dir:
          type: boolean
          example: false
        mime:
          type: string
          example: image/png
        size:
          type: integer
          format: int64
          example: 104200124
          description: Size in bytes
        created:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        modified:
          type: integer
          format: int64
          example: 34587357
          description: Unix timestamp
        childCount:
          type: integer
          format: int
          example: 8
          description: Number of direct children nodes
        metadata:
          $ref: '#/components/schemas/nodeMetadata'
    shareListNode:
      type: object
      properties:
        total:
          type: integer
          example: 422
        searchTotal:
          type: integer
          example: 42
        totalSize:
          type: integer
          format: int64
          example: 343433618
          description: Size in bytes
        searchSize:
          type: integer
          format: int64
          example: 953618
          description: Size in bytes
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/getShareListNode'
    getNotification:
      type: object
      required:
      - notificationID
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: Notification title
        body:
          type: string
          example: Notification body
        createdAt:
          type: integer
          format: int64
          example: 1517734800
          description: Unix timestamp
        readAt:
          type: integer
          format: int64
          example: 1517734800
          description: Unix timestamp
    listNotifications:
      type: object
      required:
      - notifications
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/getNotification'

    shareProperties:
      type: object
      properties:
        expiresAt:
          type: integer
          format: int64
          example: 35789453957
          description: Unix timestamp of the share's expiration time.
        urlToken:
          type: string
          minLength: 5
          maxLength: 32
          pattern: '^[a-zA-Z0-9.,_-]{5,32}$'
          example: ThisIs_My-Cool-1,23-Share.
          description: |
            (Public share only) Custom share token under which it is available.
            Allowed characters are: `a-z A-Z 0-9 . , _ -`.
        password:
          type: string
          minLength: 1
          maxLength: 72
          example: MySecritSh4re
          description: Optional password for accessing the share.
        allowedUserIds:
          type: array
          items:
            type: integer
          format: int64
          example: [1, 2, 3]
          description: |
            (Internal share only) Array of user IDs allowed to access the share.
        permissions:
          $ref: '#/components/schemas/sharePermissions'
        description:
          type: string
          example: This is a shared space to view our family/workspace photos
          description: A descriptive field for the share.

    createShare:
      allOf:
        - $ref: '#/components/schemas/shareProperties'
        - type: object
          properties:
            nodeId:
              type: integer
              format: int64
              example: 4242
              description: The ID of the node being shared.
            type:
              type: string
              enum:
                - Internal
                - Public
              example: Internal
              description: |
                The type of shares. Internal shares are shared to users from one account.
                Public shares are accessible by anyone with the URL.

    updateShare:
      allOf:
        - $ref: '#/components/schemas/shareProperties'
        - type: object
          properties:
            removePassword:
              type: boolean
              example: true
              description: (For public share only) Set to true to remove the current password from the share
            removeExpiresAt:
              type: boolean
              example: true
              description: Set to true to remove the current expiresAt field from the share
            removeAllowedUserIds:
              type: boolean
              example: true
              description: Set to true to remove the current allowed user ids